<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Github on Calvin Haynes的博客站</title>
    <link>https://blog.calvinhaynes.top/tags/github/</link>
    <description>Recent content in Github on Calvin Haynes的博客站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>chx1006488386@163.com (Calvin Haynes)</managingEditor>
    <webMaster>chx1006488386@163.com (Calvin Haynes)</webMaster>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 21 Jan 2022 00:27:09 +0800</lastBuildDate>
    <sy:updatePeriod>daily</sy:updatePeriod>
    
        <atom:link href="https://blog.calvinhaynes.top/tags/github/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      
      <item>
        <title>一文教你玩转Git和Github</title>
        <link>https://blog.calvinhaynes.top/posts/%E4%B8%80%E6%96%87%E6%95%99%E4%BD%A0%E7%8E%A9%E8%BD%ACgit%E5%92%8Cgithub/</link>
        <pubDate>Fri, 21 Jan 2022 00:27:09 +0800</pubDate>
        <author>chx1006488386@163.com (Calvin Haynes)</author>
        <atom:modified>Fri, 21 Jan 2022 00:27:09 +0800</atom:modified>
        <guid>https://blog.calvinhaynes.top/posts/%E4%B8%80%E6%96%87%E6%95%99%E4%BD%A0%E7%8E%A9%E8%BD%ACgit%E5%92%8Cgithub/</guid>
        <description>前言 Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency. Git 是一个免费开源的分布式版本控制系统，最初由 Linux 之父 Linus 开发，它诞生的原因就是 Linus 希望有一个</description>
        <content:encoded>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Git is a &lt;a href=&#34;https://git-scm.com/about/free-and-open-source&#34;&gt;free and open source&lt;/a&gt; distributed version control system designed to handle everything from small to very large projects with speed and efficiency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Git 是一个免费开源的分布式版本控制系统，最初由 Linux 之父 Linus 开发，它诞生的原因就是 Linus 希望有一个工具便于管理 Linux 内核代码的更新迭代，而且分布式的结构比集中式更加稳定并且更利于团队协作，因为每个用户主机都可以拥有一个完整的版本库，而且大家可以工作于不同分支最后合并为一个分支。&lt;/p&gt;
&lt;h2 id=&#34;1---git的安装&#34;&gt;1 - Git的安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;官网安装：&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Downloads&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows 系统包管理器 &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; 安装&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;n&#34;&gt;choco&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Linux 系统安装（ubuntu）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;apt-get install git
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;2---git-中一些术语的解释和理解&#34;&gt;2 - Git 中一些术语的解释和理解&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;下面会对Git中各种术语进行一些通俗易懂的解释，方便大家快速明白Git中各个术语的功能和含义，具体术语解释的官方手册地址我在每个术语的括号中的英文原词加上了超链接，大家想仔细了解的话可以点进去认真阅读。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;远程仓库名称&lt;/strong&gt;（&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8&#34;&gt;remote name&lt;/a&gt;）：简单来说它就是远程仓库（&lt;strong&gt;URL链接&lt;/strong&gt;）映射在&lt;strong&gt;本地&lt;/strong&gt;的一个别名/标签，纯粹是为了方便在本地可以方便的选择远端（&lt;strong&gt;通常这个别名会自定义为远程仓库内容的概括&lt;/strong&gt;）进行代码提交和更新，默认是 &lt;strong&gt;origin&lt;/strong&gt;，也可以在本地通过命令修改，通常一个本地的文件夹可以关联很多个远程仓库，然后可以同时使用和更新多个远程仓库的代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分支&lt;/strong&gt;（branch）：在项目开发中，通常对于新功能开发或者很多部门分工合作，&lt;strong&gt;分支和合并&lt;/strong&gt;功能是一个非常好的方式，通常有一个主要用于发布项目的主分支，然后其他从主分支创建出来的子分支会在开发测试完毕后&lt;strong&gt;合并&lt;/strong&gt;（merge）到主分支中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git的一些操作术语&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;克隆&lt;/strong&gt;（&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E8%8E%B7%E5%8F%96-Git-%E4%BB%93%E5%BA%93&#34;&gt;clone&lt;/a&gt;）：从远端服务器将一个git项目下载到本地。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合并&lt;/strong&gt;（&lt;a href=&#34;https://www.atlassian.com/git/tutorials/using-branches/git-merge&#34;&gt;merge&lt;/a&gt;）：将一个分支的内容合并到另一个分支上（这个分支一般是发布项目的&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E4%BD%9C%E6%B5%81#:~:text=%E8%AE%B8%E5%A4%9A%E4%BD%BF%E7%94%A8%20Git%20%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E9%83%BD%E5%96%9C%E6%AC%A2%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E6%96%B9%E5%BC%8F%E6%9D%A5%E5%B7%A5%E4%BD%9C%EF%BC%8C%E6%AF%94%E5%A6%82%E5%8F%AA%E5%9C%A8%20master%20%E5%88%86%E6%94%AF%E4%B8%8A%E4%BF%9D%E7%95%99%E5%AE%8C%E5%85%A8%E7%A8%B3%E5%AE%9A%E7%9A%84%E4%BB%A3%E7%A0%81%E2%80%94%E2%80%94%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BB%85%E4%BB%85%E6%98%AF%E5%B7%B2%E7%BB%8F%E5%8F%91%E5%B8%83%E6%88%96%E5%8D%B3%E5%B0%86%E5%8F%91%E5%B8%83%E7%9A%84%E4%BB%A3%E7%A0%81%E3%80%82%20%E4%BB%96%E4%BB%AC%E8%BF%98%E6%9C%89%E4%B8%80%E4%BA%9B%E5%90%8D%E4%B8%BA%20develop%20%E6%88%96%E8%80%85%20next%20%E7%9A%84%E5%B9%B3%E8%A1%8C%E5%88%86%E6%94%AF%EF%BC%8C%E8%A2%AB%E7%94%A8%E6%9D%A5%E5%81%9A%E5%90%8E%E7%BB%AD%E5%BC%80%E5%8F%91%E6%88%96%E8%80%85%E6%B5%8B%E8%AF%95%E7%A8%B3%E5%AE%9A%E6%80%A7%E2%80%94%E2%80%94%E8%BF%99%E4%BA%9B%E5%88%86%E6%94%AF%E4%B8%8D%E5%BF%85%E4%BF%9D%E6%8C%81%E7%BB%9D%E5%AF%B9%E7%A8%B3%E5%AE%9A%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B8%80%E6%97%A6%E8%BE%BE%E5%88%B0%E7%A8%B3%E5%AE%9A%E7%8A%B6%E6%80%81%EF%BC%8C%E5%AE%83%E4%BB%AC%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%90%88%E5%B9%B6%E5%85%A5%20master%20%E5%88%86%E6%94%AF%E4%BA%86%E3%80%82%20%E8%BF%99%E6%A0%B7%EF%BC%8C%E5%9C%A8%E7%A1%AE%E4%BF%9D%E8%BF%99%E4%BA%9B%E5%B7%B2%E5%AE%8C%E6%88%90%E7%9A%84%E4%B8%BB%E9%A2%98%E5%88%86%E6%94%AF%EF%BC%88%E7%9F%AD%E6%9C%9F%E5%88%86%E6%94%AF%EF%BC%8C%E6%AF%94%E5%A6%82%E4%B9%8B%E5%89%8D%E7%9A%84%20iss53%20%E5%88%86%E6%94%AF%EF%BC%89%E8%83%BD%E5%A4%9F%E9%80%9A%E8%BF%87%E6%89%80%E6%9C%89%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%B9%B6%E4%B8%94%E4%B8%8D%E4%BC%9A%E5%BC%95%E5%85%A5%E6%9B%B4%E5%A4%9A%20bug%20%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%90%88%E5%B9%B6%E5%85%A5%E4%B8%BB%E5%B9%B2%E5%88%86%E6%94%AF%E4%B8%AD%EF%BC%8C%E7%AD%89%E5%BE%85%E4%B8%8B%E4%B8%80%E6%AC%A1%E7%9A%84%E5%8F%91%E5%B8%83%E3%80%82&#34;&gt;&lt;strong&gt;稳定项目分支&lt;/strong&gt;&lt;/a&gt;），如果存在&lt;strong&gt;分支冲突&lt;/strong&gt;（&lt;a href=&#34;https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts&#34;&gt;conflicts&lt;/a&gt;）的话需要手动解决再将冲突的文件重新merge。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;获取&lt;/strong&gt;（&lt;a href=&#34;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF#:~:text=git%20branch%20%2Dvv-,%E6%8B%89%E5%8F%96,%E5%BC%8F%E5%9C%B0%E4%BD%BF%E7%94%A8%20fetch%20%E4%B8%8E%20merge%20%E5%91%BD%E4%BB%A4%E4%BC%9A%E6%9B%B4%E5%A5%BD%E4%B8%80%E4%BA%9B%E3%80%82,-%E5%88%A0%E9%99%A4%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF&#34;&gt;fetch&lt;/a&gt;）：fetch只从远端获取了远端相对于本地更新的数据，但并不会合并到本地的分支上，需要用户手动合并到本地的分支上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拉取&lt;/strong&gt;（&lt;a href=&#34;https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1#pull&#34;&gt;pull&lt;/a&gt;）：&lt;strong&gt;git pull = git fetch + git merge&lt;/strong&gt;，从远程仓库获取最新版本并直接合并到相对应的本地分支上，一般同步远程仓库和本地仓库就用pull一条指令就够了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引更改&lt;/strong&gt;（add）：将任何新的或修改的文件放入暂存区。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提交&lt;/strong&gt;（commit）：将在暂存区中的内容提交到远端分支。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3---玩转-git-cli&#34;&gt;3 - 玩转 Git CLI&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对于 CLI （Command Line Interface 命令行接口）本身确实是不如 GUI 图形化界面的软件使用起来方便的，但是由于大部分&lt;strong&gt;服务器&lt;/strong&gt;的操作系统都是 &lt;strong&gt;Linux&lt;/strong&gt;，在远程连接服务器我们往往在命令行界面是最为轻便和稳定的，所以学习 Git 的 CLI 操作是必不可少的，而且计算机程序的命令行版本一直是我觉得计算机领域最优雅的部分，少了很多视觉跟踪和鼠标的点击操作，我们只需要集中于屏幕光标位置利用键盘说出我们想让计算机做的事就可以了，非常的优雅！&lt;br /&gt;
还有重要的一点就是，Git 的 CLI 包含 Git 的全部内容/所有功能，而 GUI 软件往往不能发挥 Git 的全部作用。&lt;br /&gt;
以下仅仅介绍一些常用的 Git 命令，完整的 CLI命令大家可以参考&lt;a href=&#34;https://git-scm.com/docs/git#_git_commands&#34;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git-clone&#34;&gt;git clone&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone &amp;lt;远程仓库链接&amp;gt; &amp;lt;本地目录&amp;gt;
//example
git clone https://github.com/CalvinHaynes/MIT6.S081-2020Fall.git /usr/gittest
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-pull&#34;&gt;git pull&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
//example：将远程主机origin的master分支拉取过来，与本地的main分支合并。
git pull origin master:main
//如果上述没有冒号，则表示将远程origin仓库的master分支拉取下来与本地当前分支合并

&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-commit&#34;&gt;git commit&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//一般需要在 git commit 之前使用 git add 来暂存修改的文件
//但是也可以采用下面的方式简化这一步骤
git commit -am &lt;span class=&#34;s2&#34;&gt;&amp;#34;关于提交内容的解释&amp;#34;&lt;/span&gt; 
//此时再使用 git status 来检查文件状态就会得到：nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-push&#34;&gt;git push&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;
//如果本地分支名与远程分支名相同，则可以省略冒号：
git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;
//example
git push origin main:master
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-status&#34;&gt;git status&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//查看文件状态（是否需要暂存、是否需要提交）
git status
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-remote&#34;&gt;git remote&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//查看和管理本地的远程仓库名称
//1、查看所有远程仓库
git remote
git remote -v
//2、重命名远程仓库
git remote rename &amp;lt;old&amp;gt; &amp;lt;new&amp;gt;
//3、新增一个远程仓库
git remote add &amp;lt;name&amp;gt; &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-branch&#34;&gt;git branch&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//1、查看所有branch
git branch -a
//2、创建新分支，所有新分支都是基于默认分支
git branch &amp;lt;新分支名字&amp;gt;
//3、删除分支
git branch -d &amp;lt;删除分支的名字&amp;gt;
//强制删除
git branch -D &amp;lt;删除分支的名字&amp;gt; 
//4、将当前分支重命名为＜branch＞
git branch -m &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-switch&#34;&gt;git switch&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意一定要保证分支是&lt;strong&gt;干干净净&lt;/strong&gt;的再切换分支（即文件改动均已commit和push了）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//1、切换分支
git switch &amp;lt;要切换到的分支名&amp;gt;
//2、创建一个新分支并切换到该新分支
git switch -c &amp;lt;branchName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;git-merge--git-mergetool解决冲突&#34;&gt;git merge &amp;amp; git mergetool（解决冲突）&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;//1、将分支合并到默认分支上
git merge &amp;lt;被合并的分支&amp;gt;
//2、解决合并冲突问题，利用mergetool，具体配置请看&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;**这篇文章**&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;https://panmenglin.github.io/satellite-log/notes/tools/tools-merge-tool.html&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
git mergetool
//如果使用的是vimdiff，请戳&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;这里&lt;span class=&#34;o&#34;&gt;](&lt;/span&gt;https://kinboyw.github.io/2018/10/09/Use-Vimdiff-As-Git-Mergetool/&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;小结上述命令精简&#34;&gt;小结（上述命令精简）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git clone &amp;lt;远程仓库链接&amp;gt; &amp;lt;本地目录&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -am &amp;quot;关于提交内容的解释&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push &amp;lt;远程主机名&amp;gt; &amp;lt;本地分支名&amp;gt;:&amp;lt;远程分支名&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git remote -v&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git switch &amp;lt;要切换到的分支名&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d &amp;lt;删除分支的名字&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch &amp;lt;新分支名字&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge &amp;lt;被合并的分支&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git mergetool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;git基本工作流图片&#34;&gt;Git基本工作流图片&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/GitWorkFlow.pjkkod3vq7k.webp&#34; alt=&#34;GitWorkFlow&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;3---玩转-git-gui&#34;&gt;3 - 玩转 Git GUI&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;关于Git的GUI （Graphic User Interface） 图形化界面软件有很多，在官网上有一个所有GUI的&lt;a href=&#34;https://git-scm.com/downloads/guis/&#34;&gt;清单&lt;/a&gt;，但是这其中我个人最为推荐的还是github官方的GUI：&lt;a href=&#34;https://desktop.github.com/&#34;&gt;Github Desktop&lt;/a&gt; ，有关于其他程序猿的生产力软件推荐可以看我下面这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/412903121&#34;&gt;属于每一个程序猿和学生的一份高效率软件清单&amp;ndash;第一弹:程序猿高效开发工具（持续更新）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;主要操作界面分区如下：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/githubdesktop.4vj8lsgzxmo0.webp&#34; alt=&#34;githubdesktop&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其他操作建议查看官网的手册，中文版的看起来也很舒服：&lt;a href=&#34;https://docs.github.com/cn/desktop&#34;&gt;https://docs.github.com/cn/desktop&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4---玩转-github&#34;&gt;4 - 玩转 GitHub&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Github是全球最大的开源代码服务器，利用Github可以很好的托管开源作者的代码，也可以方便其他人使用和借鉴，&lt;strong&gt;下面我将介绍几个让你的Github用的更爽的插件和建议&lt;/strong&gt;，关于Github的使用我下面不会再讲解，如何使用可以看官方指南：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.github.com/cn/get-started&#34;&gt;开始使用 GitHub - GitHub Docs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1---octotree浏览器插件httpschromegooglecomwebstoredetailoctotree-github-code-treebkhaagjahfmjljalopjnoealnfndnagchlzh-cn&#34;&gt;1 - &lt;a href=&#34;https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc?hl=zh-CN&#34;&gt;Octotree浏览器插件&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个插件使得在Github上阅读代码更舒服，将Github项目的文件夹分层显示在左侧像IDE一样直观，使用效果如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/octotree.681skfj0s9c0.webp&#34; alt=&#34;octotree&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;2---github-web-ide-浏览器插件httpschromegooglecomwebstoredetailgithub-web-ideadjiklnjodbiaioggfpbpkhbfcnhgkfe&#34;&gt;2 - &lt;a href=&#34;https://chrome.google.com/webstore/detail/github-web-ide/adjiklnjodbiaioggfpbpkhbfcnhgkfe&#34;&gt;Github Web IDE 浏览器插件&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个插件集成了多个云平台IDE厂商的产品，可以进入在线IDE查看代码，甚至可以搭建云环境进行在线运行，使用效果如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/GithubWebIDE.2zdt7mpjkrs0.webp&#34; alt=&#34;GithubWebIDE&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;3---github-gisthttpsgistgithubcom&#34;&gt;3 - &lt;a href=&#34;https://gist.github.com/&#34;&gt;Github Gist&lt;/a&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Github Gist可以在远端存储代码段，相当于自己有了一个云存储空间用于存一些常用的配置文件的代码段，或者是一些算法的代码段，十分的不戳！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/GithubGist.3b44g4p8qrm0.webp&#34; alt=&#34;GithubGist&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;4---github-个性个人简介&#34;&gt;4 - Github 个性个人简介&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这是Github的一个彩蛋吧算是，只要你创建一个和自己Github账户名相同的Github仓库（一定要增加README.md文件，语法格式戳&lt;a href=&#34;https://docs.github.com/cn/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax&#34;&gt;这里&lt;/a&gt;）就可以在你的Github主页上展示下面这种效果的自我介绍（大家也可以去&lt;a href=&#34;https://github.com/CalvinHaynes&#34;&gt;我的Github主页&lt;/a&gt;上看下效果）：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/GithubSelfIntroduction.ltrbkjuzkxc.webp&#34; alt=&#34;GithubSelfIntroduction&#34; /&gt;&lt;/p&gt;
&lt;p&gt;具体教程可以参考这篇文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://juejin.cn/post/6886826772550123534&#34;&gt;来弄一个Github的个人介绍页吧~ - 掘金&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;创作不易，整理这些内容花费了很大精力，希望大家能有所收获，能尽快熟练使用Git，毕竟coding的产品必然是要走向大众的，一个代码产品的诞生和管理需要一个好的工具，Git是每个程序猿的不二之选，无论是独立开发者亦或是团队开发，Git都是一大利器！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=dD4NZkUt&#34;&gt;725133797&lt;/a&gt; 讨论交流。&lt;/p&gt;
&lt;p&gt;最后附上我的个人博客站：&lt;a href=&#34;https://blog.calvinhaynes.top/&#34;&gt;https://blog.calvinhaynes.top/&lt;/a&gt;，欢迎访问和交流&lt;/p&gt;
</content:encoded>
        <dc:creator>Calvin Haynes</dc:creator>
        
        
        
        
          
            
              <category>Github</category>
            
          
        
        
            
              <category>程序猿技能</category>
            
        
        
      </item>
      
      <item>
        <title>Hugo搭建个人博客教程（GithubPages &#43; 阿里云）</title>
        <link>https://blog.calvinhaynes.top/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8Bgithubpages-&#43;-%E9%98%BF%E9%87%8C%E4%BA%91/</link>
        <pubDate>Thu, 05 Aug 2021 00:22:49 +0800</pubDate>
        <author>chx1006488386@163.com (Calvin Haynes)</author>
        <atom:modified>Thu, 05 Aug 2021 00:22:49 +0800</atom:modified>
        <guid>https://blog.calvinhaynes.top/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8Bgithubpages-&#43;-%E9%98%BF%E9%87%8C%E4%BA%91/</guid>
        <description>前言 经过种种尝试，还是决定选择了Hugo作为了搭建个人博客的框架，Hugo是目前可以搭建个人博客的框架中部署最快的，而且坑也相对很少，不过还</description>
        <content:encoded>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;经过种种尝试，还是决定选择了Hugo作为了搭建个人博客的框架，Hugo是目前可以搭建个人博客的框架中部署最快的，而且坑也相对很少，不过还是有的，近几天折腾了不少东西，也终于算是初步搭建完了Hugo+Zoo主题的&lt;a href=&#34;https://blog.calvinhaynes.top/&#34;&gt;个人博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在本文中我会讲解部署的详细过程，也会科普一些部署中的原理，毕竟我也刚刚接触，所以有些说的不对的地方也希望评论区的大佬来勘误，谢谢啦。&lt;/p&gt;
&lt;p&gt;如果遇到部署问题，欢迎在评论区打出你的问题，我和知乎这个优秀社区的所有人都有可能回答你的疑问哦，本文如果对你有帮助的话，还希望多多点赞收藏转发，谢谢啦。&lt;/p&gt;
&lt;h2 id=&#34;1---使用hugo创建静态网站实战&#34;&gt;1 - 使用Hugo创建静态网站实战&lt;/h2&gt;
&lt;h4 id=&#34;1安装hugo&#34;&gt;1、安装Hugo&lt;/h4&gt;
&lt;p&gt;博主用的是Windows系统，所以安装过程中我会基于Windows进行讲解，有关其他操作系统的安装方法可以参考官方的&lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Windows下的Hugo安装我推荐使用chocolatey包管理器进行安装，接触过Linux的朋友们都知道，Linux的各种包管理器，利用命令行就可以实现包的更新，删除等操作，Windows下也有类似的包管理器就是chocolatey了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装过程详解&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装chocolatey包管理器：在&lt;a href=&#34;https://chocolatey.org/&#34;&gt;官网&lt;/a&gt;点击 &lt;code&gt;Install Now&lt;/code&gt; 即可下载&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行中敲入&lt;code&gt;choco --version&lt;/code&gt;，如果显示版本号证明你的 chocolatey 已经安装完毕，如果有误请检查环境变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令行中安装hugo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;choco install hugo -confirm
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装hugo-extended（扩展版本）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;choco install hugo-extended -confirm
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查hugo是否安装成功：命令行中敲入&lt;code&gt;hugo version&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2初步建站实战利用githubpages进行部署&#34;&gt;2、初步建站实战（利用GithubPages进行部署）&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在Github中建立一个仓库，仓库名为&lt;code&gt;用户名.github.io&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.1l0hxny3q7b4.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将仓库clone到本地一个你想存放网站文件的文件夹&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone &amp;lt;YOUR-REPOSITORY_URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;创建网站：在存放你博客的根目录 &amp;lt;YOUR-REPOSITORY_URL&amp;gt; 中敲入以下命令&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;//注意site后面是一个点，不能忽略啊，.代表当前目录
hugo new site .
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;添加主题（以我博客的主题Zzo为例子）：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git init
git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;把 themes/zzo 下的 exampleSite文件夹的内容复制到你博客的根目录&lt;/li&gt;
&lt;li&gt;在博客根目录中敲命令：（启动hugo服务器）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;点击&lt;a href=&#34;http://localhost:1313/&#34;&gt;这里&lt;/a&gt;查看测试（主题和示例网站中的markdown博客都正确显示了）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3githubpages服务--云托管&#34;&gt;3、GithubPages服务 + 云托管&lt;/h4&gt;
&lt;h5 id=&#34;1---配置githubpages服务进行个人博客的部署使得所有人都可以访问你的博客站&#34;&gt;1 - 配置GithubPages服务进行个人博客的部署，使得所有人都可以访问你的博客站&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;在 config.toml 文件中设置 baseURL 为 Github Pages 服务的域名（用户名.github.io）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;c&#34;&gt;#config/config.toml&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;baseURL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://blog.calvinhaynes.top/&amp;#34;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;#未设置阿里云托管之前应该是 &amp;#34;https://用户名.github.io&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Calvin Haynes&amp;#39;s Blog&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;theme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;zzo&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;将更改过后的 github 仓库文件夹（就是你的博客根目录）推送到远端&lt;/li&gt;
&lt;li&gt;在Github上设置GithubPages服务的一些参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.1ssfj1nz0jkw.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;（Ps：有关 Custom domain 在以下的云托管中进行解释）&lt;/p&gt;
&lt;h5 id=&#34;2---云托管阿里云&#34;&gt;2 - 云托管（阿里云）&lt;/h5&gt;
&lt;p&gt;​		博主买了阿里云的学生机，一个1核2GB内存的轻量应用服务器，所以将博客站云托管在这个服务器上，以下就是基于阿里云的教程，其他服务器也都差不太多，可以自行google，有关阿里云服务器购买和初步配置自行到官网查看文档吧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拥有一个阿里云服务器还不够，你需要&lt;a href=&#34;https://wanwang.aliyun.com/?spm=5176.19720258.J_8058803260.53.55d32c4axFU59f&#34;&gt;购买注册&lt;/a&gt;一个你自己的专属域名。&lt;/li&gt;
&lt;li&gt;拥有自己的专属域名之后，进入域名解析的&lt;a href=&#34;https://dns.console.aliyun.com/?spm=5176.12818093.ProductAndService--ali--widget-home-product-recent.dre0.5adc16d05LdZIH#/dns/domainList&#34;&gt;工作台&lt;/a&gt;，就可以看见你的域名了&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.7jhy38mugak0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析设置：（点击修改后各种参数的设置都有相关说明，其他问题也都可以在阿里云官网找到文档解释）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.37z6o0rdyam0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.5faxpze1aqc0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器绑定域名：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.5u53qpc5aao0.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.3992hz7hv360.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析设置完后在你的博客根目录中的 static （静态文件存放的地方）中创建一个 CNMAE 文件（注意没有任何后缀）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.q0epou32e1s.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CNAME 文件中写入你设置的域名，我的就是 &lt;a href=&#34;https://blog.calvinhaynes.top/&#34;&gt;blog.calvinhaynes.top&lt;/a&gt; ，写完记得更新github库（CNAME文件就是给你这个Github库绑定域名用的，CNAME的全名就是 Canonical Name，意思是别名）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后更改 Github pages 配置中的 Custom domain 为你设置的新域名就好咯&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/image.1ssfj1nz0jkw.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在就可以输入你设置的域名进行访问咯，阿里云服务器在中国，所以访问速度快的一批！！！（别忘了config.toml文件的baseURL参数设置）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2---主题参数设置和个性化&#34;&gt;2 - 主题参数设置和个性化&lt;/h2&gt;
&lt;p&gt;​	这部分主要是看主题作者写的详细文档进行自己的设计，在Hugo官网中找到的比较热门的主题的Github库中都有相关的文档，建议小伙伴们自行查看学习，每个主题都有不同之处，我使用的是Zzo主题，它的官方文档在&lt;a href=&#34;https://zzo-docs.vercel.app/&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;​	我的Github仓库在&lt;a href=&#34;https://github.com/CalvinHaynes/CalvinHaynes.github.io&#34;&gt;这里&lt;/a&gt;，欢迎 fork 和查看配置文件&lt;/p&gt;
&lt;h2 id=&#34;3---资源整理一些有用的文档&#34;&gt;3 - 资源整理（一些有用的文档）&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://zzo-docs.vercel.app/&#34;&gt;Zzo主题官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://help.aliyun.com/product/29697.html?spm=a2c4g.11186623.6.540.d0044e82AEgtJN&#34;&gt;阿里云云解析DNS文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/content-management/front-matter/&#34;&gt;hugo文章的front matter&lt;/a&gt;&lt;/p&gt;
</content:encoded>
        <dc:creator>Calvin Haynes</dc:creator>
        
        
        
        
          
            
              <category>Hugo</category>
            
          
            
              <category>Github</category>
            
          
        
        
            
              <category>个人博客发展</category>
            
        
        
      </item>
      

    
  </channel>
</rss>
