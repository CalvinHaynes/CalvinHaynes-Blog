[{"content":"前言   结语 感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n","description":"","id":0,"section":"posts","tags":[""],"title":"那些年你不知道的git冷门操作","uri":"https://blog.calvinhaynes.top/posts/%E9%82%A3%E4%BA%9B%E5%B9%B4%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84git%E5%86%B7%E9%97%A8%E6%93%8D%E4%BD%9C/"},{"content":"提问的智慧 艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond） Thyrsus Enterprises\nesr@thyrsus.com\n瑞克.莫恩（Rick Moen） respond-auto@linuxmafia.com\n版权©2001, 2006 Eric S. Raymond, Rick Moen\n修订历史 修订版 3.9\t2013年4月23日\tesr 修正链接 修订版 3.8\t2012年6月19日\tesr 修正链接 修订版 3.7\t2010年12月6日\tesr 对于英语为第二语言人士的有益建议 修订版 3.7\t2010年11月2日\tesr 几种翻译不见了 修订版 3.6\t2008年3月19日\tesr 小更新及新链接 修订版 3.5\t2008年1月2日\tesr 勘误及一些翻译链接 修订版 3.4\t2007年3月24日\tesr 新章节：“关于代码的问题” 修订版 3.3\t2006年9月29日\tesr 增加凯.尼格曼（Kai Niggemann）的一个好建议 修订版 3.2\t2006年1月10日\tesr 加入瑞克.莫恩（Rick Moen）编写的内容 修订版 3.1\t2004年10月28日\tesr 文档“谷歌是你的朋友！” 修订版 3.0\t2004年2月2日\tesr 主要新增在网页论坛应有的礼节 原文：How To Ask Questions The Smart Way 翻译：王刚 \u0026lt;yafrank at 126 dot com \u0026gt; 时间：2013年10月26日\n内容\n目录  提问的智慧\n- 艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）\n- 瑞克.莫恩（Rick Moen）  修订历史 原文：How To Ask Questions The Smart Way 目录 弃权申明 引言 提问前 提问时  仔细挑选论坛 面向新手的论坛和互联网中继聊天（IRC）通常响应最快 第二步，使用项目的邮件列表 使用有意义且明确的主题 使问题容易回复 用清晰、语法、拼写正确的语句书写 使用易于读取且标准的文件格式发送问题 描述问题应准确且有内容 量不在多，精炼则灵 别急于宣称找到臭虫 低声下气代替不了做自己的家庭作业 描述问题症状而不是猜测 按时间先后罗列问题症状 描述目标而不是过程 别要求私下回复电邮 提问应明确 关于代码的问题 别张贴家庭作业式问题 删除无意义的要求 不要把问题标记为“紧急”，即使对你而言的确如此 礼貌总是有益的 问题解决后追加一条简要说明   如何解读回答  “读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸 如果还不明白…… 对待无礼   别象失败者那样反应 提问禁忌  好问题与坏问题   如果得不到回答 如何更好地回答 相关资源 鸣谢     译文： 印尼语 白俄罗斯语 巴西葡萄牙语 简体中文 荷兰语 法语 乔治亚语 德语 希腊语 希伯来语 日语 波兰语 葡萄牙语 罗马尼亚语 俄语 西班牙语 泰语 如果你想复制、镜像、翻译或引用本文，请参阅我的 复制协议。\n 弃权申明 许多项目的网站在如何取得帮助的部分链接了本文，这没有关系，也正是我们想要的。但如果你是该项目生成此链接的网管，请在链接附近显著位置注明：我们不提供该项目的服务支持！\n我们已经领教了没有此说明带来的痛苦，我们将不停地被一些白痴纠缠，他们认为既然我们发布了本文，那么我们就有责任解决世上所有的技术问题。\n如果你是因为需要帮助正在阅读本文，然后就带着可以直接从作者那取得帮助的印象离开，那么 你 就不幸成了我们所说的白痴之一。 别向 我们 提问，我们不会理睬的。 我们只是在这教你如何从那些真正懂得你软硬件问题的人那里取得帮助，但 99.9％ 的时间我们不会是那些人。除非你非常地 确定 本文的作者是你遇到问题方面的专家，请不要打搅，这样大家都更开心一点。\n引言 在 黑客 的世界里，你所提技术问题的解答很大程度上取决于你提问的方式与解决此问题的难度，本文将教你如何提问才更有可能得到满意的答复。\n开源程序的应用已经很广，你通常可以从其他更有经验的用户而不是黑客那里得到解答。这是好事，他们一般对新手常有的毛病更容忍一点。然尔，使用我们推荐的方法，象对待黑客那样对待这些有经验的用户，通常能最有效地得到问题的解答。\n第一件需要明白的事是黑客喜欢难题和激发思考的好问题。假如不是这样，我们也不会写本文了。如果你能提出一个有趣的问题让我们咀嚼玩味，我们会感激你。好问题是种激励与礼物，帮助我们发展认知，揭示没有注意或想到的问题。在黑客中，“好问题！” 是非常热烈而真挚的赞许。\n此外，黑客还有遇到简单问题就表现出敌视或傲慢的名声。有时，我们看起来还对新手和愚蠢的家伙有条件反射式的无礼，但事情并不真是这样。\n我们只是毫无歉意地敌视那些提问前不愿思考、不做自己家庭作业的人。这种人就象时间无底洞──他们只知道索取，不愿意付出，他们浪费了时间，这些时间本可用于其它更有趣的问题或更值得回答的人。我们将这种人叫做 “失败者（loser）” （由于历史原因，我们有时将“loser”拼写为“lusers” 。）\n我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，计算机只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做，我们承认这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。不过，我们回答问题的风格是为了适应那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就会在自己能做得最好的事情上不再那么犀利。\n我们（大多数）是自愿者， 从自己繁忙的生活中抽时间来回答问题，有时会力不从心。因此，我们会毫不留情地滤除问题，特别是那些看起来象是失败者提的，以便更有效地把回答问题的时间留给那些胜利者。\n如果你认为这种态度令人反感、以施惠者自居或傲慢自大，请检查你的假设，我们并未要求你屈服──事实上，假如你做了该做的努力，我们中的大多数将非常乐意平等地与你交流，并欢迎你接纳我们的文化。试图去帮助那些不愿自救的人对我们简直没有效率。不懂没有关系，但愚蠢地做事不行。\n所以，你不必在技术上很在行才能吸引我们的注意，但你 必须 表现出能引导你在行的姿态──机 敏、有想法、善于观察、乐于主动参与问题的解决。如果你做不到这些使你与众不同的事情，我们建议你付钱跟别人签商业服务合同，而不是要求黑客无偿帮助。\n如果你决定向我们求助，你不会想成为一名失败者，你也不想被看成一个失败者。得到快速有效回答的最好方法是使提问者看起来象个聪明、自信和有想法的人，并且暗示只是碰巧在某一特别问题上需要帮助。\n（欢迎对本文指正，可以将建议发至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。 请注意，本文不想成为一般性的 网络礼仪 指南，我一般会拒绝那些与引出技术论坛中有用的回答不特别相关的建议。）\n提问前 在通过电邮、新闻组或论坛提技术问题以前，做以下事情：\n 尝试在你准备提问论坛的历史文档中搜索答案 尝试搜索互联网以找到答案 尝试阅读手册以找到答案 尝试阅读“常见问题文档”（FAQ）以找到答案 尝试自己检查或试验以找到答案 尝试请教懂行的朋友以找到答案 如果你是程序员，尝试阅读源代码以找到答案  提问时，请先表明你已做了上述事情，这将有助于建立你不是寄生虫与浪费别人时间的印象。最好再表述你从中 学到的东西 ，我们喜欢回答那些表现出能从答案中学习的人。\n运用某些策略，比如用谷歌（Google）搜索你遇到的各种错误提示（既搜索 谷歌论坛，也搜索网页）， 这样很可能直接就找到了解决问题的文档或邮件列表线索。 即使没有结果，在邮件列表或新闻组寻求帮助时提一句“我在谷歌中搜过下列句子但没有找到什么有用的东西” 也是件好事，至少它表明了搜索引擎不能提供哪些帮助。将搜索关键词与你的问题及可能的解决方案联系起来，还有助于引导其他有类似问题的人。\n别着急，不要指望几秒钟的谷歌搜索就能解决一个复杂的问题。读一下常见问题文档。在向专家提问之前，先向后靠靠放松一下，再思考一下问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑抛出，只因你的第一次搜索没有结果（或者结果太多）。\n认真地思考，准备好你的问题。轻率的提问只能得到轻率的回答，或者压根没有。在提问时，你越是表现出在此前做过思考与努力去解决自己的问题，你越有可能得到真正的帮助。\n注意别提错问题。如果提问基于错误的假设，某黑客多半会一边想 “愚蠢的问题……”，一边按将错就错的答案回复你，并且希望这种只是得到你自己“问的问题”而非真正所需的解答，给你一个教训。\n永远不要假设你 有资格 得到解答。你没有这种资格，毕竟你没有为此服务付费。如果你能够提出有内容、有趣和激励思考的问题──那种毫无疑问能够向社区贡献经验，而不仅仅是消极地要求从别人那获取知识的问题，你将“挣到”答案。\n另一方面，表明你有能力也乐意参与问题的解决是个很好的开端。“有没有人能指个方向？”，我这还差点什么？”，“我应该查哪个网站？”，通常要比 “请给出我可以用的完整步骤”更容易得到回复，因为你表明了只要有人能指个方向，你就很乐意完成剩下的过程。\n提问时 仔细挑选论坛 要对在哪提问留心，如果你做了下述事情，多半会被一笔勾销或被看成“失败者”：\n 张贴与论坛主题无关的问题 在面向高级技术问题的论坛上张贴肤浅的问题，或者反之。 在太多不同的新闻组同时张贴 给既非熟人也没有义务解决你问题的人发送你私人的电邮  为保护通信的渠道不被无关的东西淹没，黑客会除掉那些没有找对地方的问题，你不会想让这种事落到自己头上的。\n因此，第一步是找对论坛。谷歌和其它搜索引擎还是你的朋友，可以用它们搜索你遇到困难的软硬件问题最相关的项目网站。那里通常都有项目的常见问题（FAQ）、邮件列表及文档的链接。如果你的努力（包括 阅读 FAQ）都没有结果，这些邮件列表就是最后能取得帮助的地方。项目的网站也许还有报告臭虫的流程或链接，如果是这样，去看看。\n向陌生的人或论坛发送邮件极有可能是在冒险。譬如，不要假设一个内容丰富的网页的作者想充当你的免费顾问，不要对你的问题是否会受到欢迎做太乐观的估计──如果你不确定，向别处发或者压根别发。\n在选择论坛、新闻组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以明确你的问题是否切题。发贴前先翻翻已有的帖子，这样可以让你感受一下那里行事的方式。事实上，张贴前在新闻组或邮件列表的历史文档中搜索与你问题相关的关键词是个极好的主意，也许就找到答案了。即使没有，也能帮助你归纳出更好的问题。\n别象机关枪似的一次性“扫射”所有的帮助渠道，这就象大喊大叫一样会令人不快，温柔地一个一个来。\n弄懂主题！最典型的错误之一是在某种致立于跨平台可移植的语言、库或工具的论坛中提关于 Unix 或 Windows 操作系统程序接口的问题。如果你不明白为什么这是大错，最好在搞清楚概念前什么也别问。\n一般来说，在仔细挑选的公共论坛中提问比在私有论坛中提同样的问题更容易得到有用的回答。有几个道理支持这点，一是看潜在的回复者有多少，二是看论坛的参与者有多少，黑客更愿回答能启发多数人的问题。\n可以理解，老练的黑客和一些流行软件的作者正在承受过多的不当消息。就象那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端──已经好几次了，一些流行软件的作者退出了对自己软件的支持，因为伴随而来的涌入其私人邮箱的垃圾邮件变得无法忍受。\n面向新手的论坛和互联网中继聊天（IRC）通常响应最快 本地的用户组织或者你所用的 Linux 发行版也许正在宣传新手取得帮助的论坛或 IRC 通道（在一些非英语国家，新手论坛很可能还是邮件列表），这些地方是开始提问的好去处，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。经过宣传的 IRC 通道是公开邀请提问的地方，通常可以得到实时的回复。\n事实上，如果出问题的程序来自某发行版（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的项目论坛或邮件列表，（否则）该项目的黑客可能仅仅回复“用 我们的 代码”。\n在任何论坛发贴以前，先看看有没有搜索功能。如果有，就试着用问题的几个关键词搜索一下，也许就有帮助。如果在此之前你已做过全面的网页搜索（你应该这样去做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。\n通过论坛或 IRC 通道提供项目的用户支持有增长的趋势，电子邮件交流则更多地为项目开发者保留。所以先在论坛或 IRC 中寻求与该项目相关的帮助。\n第二步，使用项目的邮件列表 当某个项目存在开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文档和主页，找到项目的邮件列表并使用它。采用这种办法有几个很好的理由：\n 向个别开发者提的问题（如果）足够好，也将对整个项目组有益。相反，如果你认为自己的问题对整个项目组来说太愚蠢，这也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导）也许太忙以至于没法回答你的问题。 大多数邮件列表都要存档，那些存档将被搜索引擎索引，如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息改进文档或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。  如果一个项目既有 “用户” 也有“开发者”（或 “黑客”）邮件列表或论坛，而你又不摆弄那些代码，向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会遭受你的噪音干扰。\n然尔，如果你 确信 你的问题不一般，而且在“用户” 列表或论坛中几天都没有回复，可以试试“开发者”列表或论坛。建议你在张贴前最好先暗暗地观察几天,至少看看最近几天保存的帖子,以了解那的行事方式（事实上这是参与任何私有或半私有列表的好主意）\n如果你找不到一个项目的邮件列表，而只能查到项目维护者的地址，只管向其发信。即便在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。\n使用有意义且明确的主题 在邮件列表、新闻组或论坛中，主题是你在五十个或更少的字以内吸引有资格专家注意的黄金机会，不要用诸如 “请帮我” （更别提大写的 “请帮我！！！！”，这种主题的消息会被条件反射式地删掉）之类的唠叨浪费机会。不要用你痛苦的深度来打动我们，相反，要在这点空间中使用超级简明扼要的问题描述。\n使用主题的好惯例是“对象──偏差”（式的描述），许多技术支持组织就是这样做的。在“对象”部分指明是哪一个或哪一组东西有问题，在“偏差”部分则描述与期望的行为不一致的地方。\n愚蠢：\n 救命啊！我的笔记本视频工作不正常！\n 明智：\n X.org 6.8.1 扭曲鼠标光标，MV1005 型号的某显卡芯片组\n 更明智：\n 使用 MV1005 型号的某显卡芯片组在 X.org 6.8.1 的鼠标光标被扭曲\n 编写 “对象──偏差”式描述的过程有助于你组织对问题的细致思考。是什么被影响了？仅仅是鼠标光标或者还有其它图形？只在 X.org 中出现？或只是在其 6.8.1 版中？是针对某显卡芯片组？或者只是其中的 MV1005 型号？一个黑客只需描一眼就能够立即明白什么是你遇到的问题，什么是你自己的问题。\n更一般地，想象一下在一个只显示主题的文档索引中查找。让你的主题更好地反映问题，可以使下一个搜索类似问题的人能够在文档中直接就找到答案的线索，而不用再次发贴提问。\n如果你想在回复中提问，确保改变主题以表明你是在问一个问题，一个主题象 Re: 测试 或者 Re: 新臭虫 的消息不太可能引起足够的注意。同时，将回复中与新主题不甚相关的引用内容尽量删除。\n对于列表消息，不要直接点击回复（按钮）来开始一个全新的线索，这将限制你的观众。有些邮件阅读程序，比如 mutt，允许用户按线索排序并通过折叠线索来隐藏消息，这样做的人永远看不到你发的消息。\n仅仅改变主题还不够。mutt 和其它一些邮件阅读程序还要检查邮件头主题以外的其它信息，以便为其指定线索，所以宁可发一个全新的邮件。\n在论坛，因为消息与特定的线索紧密结合，并且通常在线索之外不可见，好的提问方式略有不同，通过回复提问并不要紧。不是所有论坛都允许在回复中出现分离的主题，而且这样做了基本上没有人会去看。不过，通过回复提问本身就是令人怀疑的做法，因为它们只会被正在查看该线索的人读到。所以，除非你 只想 在该线索当前活跃的人群中提问，还是另起炉灶比较好。\n使问题容易回复 以请向……回复来结束问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟考虑你的问题更麻烦。如果你的邮件客户端程序不支持这样做，换个好点的；如果是操作系统不支持所有这种邮件客户端程序，也换个好点的。\n在论坛，要求通过电子邮件回复是完全无礼的，除非你确信回复的信息也许是敏感的（而且有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复线索时得到电子邮件提醒，可以要求论坛发送。几乎所有论坛都支持诸如留意本线索、有回复发送邮件等功能。\n用清晰、语法、拼写正确的语句书写 经验告诉我们，粗心与草率的作者通常也粗心与草率地思考和编程（我敢打赌）。为这些粗心与草率的思考者回答问题没有什么好处，我们宁可将时间花在其它地方。\n清楚、良好地表达你的问题非常重要。如果你觉得这样做麻烦，我们也觉得注意（你的问题）麻烦。花点额外的精力斟酌一下字句，用不着太僵硬与正式──事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它 必须 很准确，而且有迹象表明你是在思考和关注问题。\n正确地拼写、使用标点和大小写，不要将 its 混淆为 it's，loose 搞成 lose 或者将 “discrete” 弄成 “discreet”。不要全部用大写，这会被视为无礼的大声嚷嚷 （全部小写也好不到哪去，因为不易阅读。Alan Cox [注：著名黑客，Linux 内核的重要参与者] 也许可以这样做，但你不行。）\n一般而言，如果你写得象个半文盲似的傻子，多半得不到理睬。也不要使用即时通讯中的简写，如将 you 简化为 u 会使你看起来象一个为了节约二次击键的半文盲式的傻子。更糟的是，如果象个小孩似地鬼画桃符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。\n如果在非母语论坛提问，你的拼写与语法错误会得到有限的宽容，但懒惰完全不会被容忍（是的，我们通常看得出其中的差别）。同时，除非你知道回复者使用的语言，请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在互联网上英语是工作语言，用英语书写可以将你的问题不被阅读就被直接删除的可能性降到最低。\n如果你用英语书写但它是你的第二语言，最好提醒潜在的回复者语言上可能的困难以便绕过这个问题，比如：\n 英语不是我的母语，请谅解拼写错误。 如果您使用某某语言，请电邮/私聊我，也许我需要您的协助翻译我的问题。 对于这个技术术语本身我很熟悉，但对于它的一些俚语或习惯表达方式就不太明白了。 我已经同时用某某语及英语提问，如果您使用两者之一回复，我很乐意翻译。  使用易于读取且标准的文件格式发送问题 如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：\n  使用纯文本而不是 HTML（超文本标注语言）（ 关闭HTML 并不难）\n  使用 MIME（多用途互联网邮件扩展）附件通常没有问题，前提是真正有内容（譬如附带的源文件或补丁），而不仅仅是邮件客户端程序生成的模板（譬如只是消息内容的拷贝）。\n  不要发送整段只是单行句子但多次折回的邮件（这使得回复部分内容非常困难）。设想你的读者是在80个字符宽的文本终端阅读邮件，设置你的行折回点小于 80 列。\n  但是，也 不要 用任何固定列折回数据（譬如日志文件拷贝或会话记录）。数据应该原样包含，使回复者确信他们看到的是与你看到的一样的东西。\n  在英语论坛中，不要使用\u0026rsquo;Quoted-Printable\u0026rsquo; MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持。当它们分断时，那些文本中四处散布的 “=20”符号既难看也分散注意力，甚至有可能破坏内容的语意。\n  永远不要 指望黑客们阅读使用封闭的专用格式编写的文档，诸如微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就象有人将还在冒热气的猪粪倒在你门口时你的反应一样。即使他们能够处理，也很厌恶这么做。\n  如果你从使用视窗的电脑发送电子邮件，关闭问题颇多的微软“聪明引用”功能（在“工具” -\u0026gt; “自动纠正选项”的“输入时自动格式化”下去掉聪明引用的选框），以免在你的邮件中到处散布垃圾字符。\n  在论坛，勿滥用“表情符号”和“HTML”功能(当它们提供时)。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来象个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是有用的回复更有兴趣。\n  如果你使用图形用户界面的邮件客户端程序(如网景公司的 Messenger、微软公司的 Outlook 或者其它类似的)，注意它们的缺省配置不一定满足这些要求。大多数这类程序有基于菜单的查看源码命令，用它来检查发送文件夹中的消息，以确保发送的是没有多余杂质的纯文本文件。\n  描述问题应准确且有内容  仔细、清楚地描述问题的症状 描述问题发生的环境(主机、操作系统、应用程序，任何相关的)，提供销售商的发行版和版本号（如：“Fedora Core 7”、“Slackware 9.1”等） 描述提问前做过的研究及其理解。 描述提问前为确定问题而采取的诊断步骤。 描述最近对计算机或软件配置的任何相关改变。 如果可能，提供在可控环境下重现问题的方法。 尽最大努力预测黑客会提到的问题，并提前备好答案。  如果你认为是代码有问题，向黑客提供在可控环境下重现问题的方法尤其重要。当你这么做时，得到有用且及时回复的可能性将大大增加。\n西蒙.泰瑟姆（Simon Tatham）写过一篇《如何有效报告臭虫》的文章，我强烈推荐各位阅读。\n量不在多，精炼则灵 你应该（写得）精炼且有内容，简单地将一大堆代码或数据罗列在求助消息中达不到目的。如果你有一个很大且复杂的测试样例让程序崩溃，尝试将其裁剪得越小越好。\n至少有三个理由支持这点。第一，让别人看到你在努力简化问题使你更有可能得到回复。第二，简化问题使你更有可能得到 有用的 回复。第三，在提纯臭虫报告的过程中，你可能自己就找到了解决办法或权宜之计。\n别急于宣称找到臭虫 当你在一个软件中遇到问题，除非你 非常、非常 的有根据，不要动辄声称找到了臭虫。提示：除非你能提供解决问题的源代码补丁，或者对前一版本的回归测试表现出不正确的行为，否则你都多半不够完全确信。对于网页和文档也如此，如果你（声称）发现了文档的“臭虫”，你应该能提供相应位置的替代文本。\n记住，还有许多其它用户并未经历你遇到的问题，否则你在阅读文档或搜索网页时就应该发现了（[你在报怨前已经做了这些，是吧 ？](#你在报怨前已经做了这些，是吧 ？)）。这也意味着很有可能是你弄错了而不是软件本身有问题。\n编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了臭虫，也就置疑了他们的能力，即使你是对的，也有可能会使其中的部分人感到不快。（此外，）在主题中嚷嚷“臭虫”也是特别不老练的。\n提问时，即使你私下非常确信已经发现一个真正的臭虫，最好写得象是 你 做错了什么。如果真的有臭虫，你会在回复中看到这点。这样做的话，如果真有虫子，维护者就会向你道歉，这总比你弄砸了然后欠别人一个道歉要强。\n低声下气代替不了做自己的家庭作业 有些人明白他们不应该粗鲁或傲慢地行事并要求得到答复，但他们退到相反的低声下气的极端：“我知道我只是个可怜的新丁，一个失败者，但……”。这既使人困扰，也没有用，当伴随着对实际问题含糊的描述时还特别令人反感。\n别用低级灵长类动物的办法浪费你我的时间，相反，尽可能清楚地描述背景情况和你的问题，这比低声下气更好地摆正了你的位置。\n有时，论坛设有单独的初学者提问版面，如果你真的认为遇到了肤浅的问题，到那去就是了，但一样别低声下气。\n描述问题症状而不是猜测 告诉黑客是什么导致了问题是没用的（如果你的诊断理论是了不起的东西，你还会向别人咨询求助吗？）。所以，确保只是告诉他们问题的原始症状，而不是你的解释和理论，让他们来解释和诊断。如果你认为陈述自己的猜测很重要，应清楚地说明这只是你的猜测并描述为什么它们不起作用。\n愚蠢：\n 我在编译内核时接连遇到 SIG11 错误，怀疑主板上的某根电路丝断了，找到它们的最好办法是什么？\n 明智：\n 我组装的电脑（K6/233 CPU、FIC-PA2007 主板[威盛 Apollo VP2 芯片组]、Corsair PC133 SDRAM 256Mb 内存）最近在开机 20 分钟左右、做内核编译时频繁地报 SIG11 错，但在头 20 分钟内从不出问题。重启动不会复位时钟，但整夜关机会。更换所有内存未解决问题，相关的典型编译会话日志附后。\n 由于以上这点许多人似乎难以掌握，这里有句话可以提醒你：“所有的诊断专家都来自密苏里州”。美国国务院的官方座右铭则是“让我看看”（出自国会议员威勒德.D.范迪弗［Willard D. Vandiver］在1899年时的讲话：“我来自一个出产玉米、棉花、牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。”）针对诊断者而言，这并不是怀疑，而只是一种真实而有用的需求，以便让他们看到与你看到的原始证据尽可能一致的东西，而不是你的猜测与总结。（所以，）让我们看看。\n按时间先后罗列问题症状 刚出问题之前发生的事情通常包含有解决问题最有效的线索。所以，记录中应准确地描述你、电脑和软件在崩溃前都做了什么。在命令行处理的情况下，有会话日志（如运行脚本工具生成的）并引用相关的若干（如20）行记录会非常有帮助。\n如果崩溃的程序有诊断选项（如-v详述开关），试着选择这些能在记录中增加排错信息的选项。记住，“多”不等于“好”。试着选取适当的排错级别以便提供有用的信息而不是将阅读者淹没在垃圾中。\n如果你的记录很长（如超过四段），在开头简述问题随后按时间先后罗列详细过程也许更有用。这样，黑客在读你的记录时就知道该注意哪些内容了。\n描述目标而不是过程 如果你想弄清楚如何做某事（而不是报告一个臭虫），在开头就描述你的目标，然后才陈述遇到问题的特定步骤。\n经常出现这种情况，寻求技术帮助的人在脑袋里有个更高层次的目标，他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身有问题，结果要费很大的劲才能通过。\n愚蠢：\n 我怎样才能让某图形程序的颜色拾取器取得十六进制的 RGB 值？\n 明智：\n 我正试着用自己选定数值的颜色替换一幅图片的色表，我现在知道的唯一方法是编辑每个表槽，但却无法让某图形程序的颜色拾取器取得十六进制的 RGB 值。\n 第二种提法是明智的，它使得建议采用更合适的工具以完成任务的回复成为可能。\n别要求私下回复电邮 黑客们认为问题的解决过程应该公开、透明，此过程中如果更有才能的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为回复者也因为能力和学识被其它同行看到而得到某种回报。\n当你要求私下回复时，此过程和回报都被中止。别这样做，让 回复者 来决定是否私下回答──如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人毫无意义。\n对这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么“向我发电邮，我将为论坛归纳这些回复”将是神奇的句子。试着将邮件列表或新闻组从洪水般雷同的回复中解救出来是非常有礼貌的──但你必须信守诺言。\n提问应明确 漫无边际的问题通常也被视为没有明确限制的时间无底洞。最有可能给你有用答案的人通常也是最忙的人（假如只是因为他们承担了太多工作的话），这些人对于没有止境的时间无底洞极其敏感，所以他们也倾向于讨厌那些漫无边际的问题。\n如果你明确了想让回复者做的事（如指点方向、发送代码、检查补丁或其它），你更有可能得到有用的回复。（因为）这样可以让他们集中精力并间接地设定了他们为帮助你需要花费的时间和精力上限，这很好。\n要想理解专家生活的世界，可以这样设想：那里有丰富的专长资源但稀缺的响应时间。你暗中要求他们奉献的时间越少，你越有可能从这些真正懂行也真正很忙的专家那里得到解答。\n所以限定你的问题以使专家回答时需要付出的时间最少──这通常与简化问题还不太一样。举个例，“请问可否指点一下哪有好一点的 X 解释？”通常要比“请解释一下 X”明智。如果你的代码不运行了，通常请别人看看哪有问题比叫他们帮你改正更明智。\n关于代码的问题 别要求他人给你出问题的代码排错而不提及应该从何入手。张贴几百行的代码，然后说一声“它不能运行”会让你得不到理睬。只贴几十行代码，然后说一句“在第七行以后，本应该显示，但实际出现的是”非常有可能让你得到回复。\n最精确描述代码问题的方法是提供一个能展示问题的最小测试样例。什么是最小测试样例？它是对问题的展现，只需要刚好能够重现非预期行为的代码即可。如何生成一个最小测试样例？如果你知道哪一行或哪一段代码会产生问题，将其复制并提供刚好够用的外围支撑代码以构成一个完整的样例（够用是指源码刚好能被编译器、解释器或任何处理它的程序所接受）。如果你不能将问题缩小到特定的段落，复制源码并去除那些与问题无关的代码段。你能提供的最小测试样例越小越好（参见 量不在多，精炼则灵 ）。\n生成一个非常小的最小测试样例并不总是可能，但尽力去做是很好的锻练，这有可能帮助你找到需要自己解决的问题。即使你找不到，黑客们喜欢看到你努力过，这将使他们更合作。\n如果你只是想让别人帮忙审一下代码，在最开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。\n别张贴家庭作业式问题 黑客们善于发现“家庭作业”式的问题。我们中的大多数人已经做了自己的家庭作业，那是该 你 做的，以便从中学到东西。问一下提示没有关系，但不是要求完整的解决方案。\n如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户组、论坛或（作为最后一招）在项目的“用户”邮件列表或论坛中提问。尽管黑客们 会 看出来，一些老用户也许仍会给你提示。\n删除无意义的要求 抵制这种诱惑，即在求助消息末尾加上诸如“有人能帮我吗？”或“有没有答案？”之类在语义上毫无意义的东西。第一，如果问题描述还不完整，这些附加的东西最多也只能是多余的。第二，因为它们是多余的，黑客们会认为这些东西烦人──就很有可能用逻辑上无误但打发人的回复，诸如“是的，你可以得到帮助”和“不，没有给你的帮助”。\n一般来说，避免提“是或否”类型的问题，除非你想得到 “是或否”类型的回答。\n不要把问题标记为“紧急”，即使对你而言的确如此 这是你的问题，不要我们的。宣称“紧急”极有可能事与愿违：大多数黑客会直接删除这种消息，他们认为这是无礼和自私地企图得到即时与特殊的关照。而且“紧急”或其它有类似含义的主题有可能触发垃圾过滤规则，潜在的回复者可能永远看不到你的问题！\n有一点点局部的例外，如果你是在一些知名度很高、会使黑客们激动的地方使用程序，也许值得这样去做。在这种情况下，如果你有期限压力，也很有礼貌地提到这点，人们也许会有足够的兴趣快一点回答。\n当然，这是非常冒险的，因为黑客们对什么是令人激动的标准多半与你的不同。譬如从国际空间站这样张贴没有问题，但代表感觉良好的慈善或政治原因这样做几乎肯定不行。事实上，张贴诸如“紧急：帮我救救这个毛绒绒的小海豹！”肯定会被黑客回避或光火，即使他们认为毛绒绒的小海豹很重要。\n如果你觉得这不可思议，再把剩下的内容多读几遍，直到弄懂了再发贴也不迟。\n礼貌总是有益的 礼貌一点，使用 请 和 谢谢你的关注 或者 谢谢你的关照，让别人明白你感谢他们无偿花时间帮助你。\n坦率地讲，这一点没有语法正确、文字清晰、准确、有内容和避免使用专用格式重要（同时也不能替代它们）。黑客们一般宁可读有点唐突但技术鲜明的臭虫报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教我们什么来评价它的）\n然尔，如果你已经谈清楚了技术问题，客气一点肯定会增加你得到有用回复的机会。\n（我们必须指出，本文唯一受到一些老黑客认真反对的地方是以前曾经推荐过的“提前谢了”，一些黑客认为这隐含着事后不用再感谢任何人的暗示。我们的建议是要么先说 提前谢了，事后 再 对回复者表示感谢，要么换种方式表达，譬如用 谢谢你的关注 或 谢谢你的关照）。\n问题解决后追加一条简要说明 问题解决后向所有帮助过的人追加一条消息，让他们知道问题是如何解决的并再次感谢。如果问题在邮件列表或新闻组中受到广泛关注，在那里追加此消息比较恰当。\n最理想的方式是向最初提问的线索回复此消息，并在主题中包含 已解决、已搞定 或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见线索 问题 X 和 问题 X-已解决 的潜在回复者就明白不用再浪费时间了（除非他个人觉得“问题 X”有趣），因此可以利用此时间去解决其它问题。\n追加的消息用不着太长或太复杂，一句简单的“你好──是网线坏了！谢谢大家──比尔”就比什么都没有要强。事实上，除非解决问题的技术真正高深，一条简短而亲切的总结比长篇大论要好。说明是什么行动解决了问题，用不着重演整个排错的故事。\n对于有深度的问题，张贴排错历史的摘要是恰当的。描述问题的最终状态，说明是什么解决了问题，在此之后 才指明可以避免的弯路。应避免的弯路部分应放在正确的解决方案和其它总结材料之后，而不要将此消息搞成侦探推理小说。列出那些帮助过你的名字，那样你会交到朋友的。\n除了有礼貌、有内容以外，这种类型的追帖将帮助其他人在邮件列表、新闻组或论坛文档中搜索到真正解决你问题的方案，从而也让他们受益。\n最后，此类追帖还让每位参与协助的人因问题的解决而产生一种满足感。如果你自己不是技术专家或黑客，相信我们，这种感觉对于你寻求帮助的老手和专家是非常重要的。问题叙述到最后不知所终总是令人沮丧的，黑客们痒痒地渴望它们被解决。挠痒痒 为你挣到的信誉将对你下次再次张贴提问非常非常的有帮助。\n考虑一下怎样才能避免他人将来也遇到类似的问题，问问自己编一份文档或 FAQ 补丁会不会有帮助，如果是的话就将补丁发给维护者。\n在黑客中，这种良好的后继行动实际上比传统的礼貌更重要，也是你善待他人而赢得声誉的方式，这是非常有价值的财富。\n如何解读回答 “读读该死的手册”（RTFM）和“搜搜该死的网络”（STFW）：如何明白你已完全搞砸 有一个古老而神圣的传统：如果你收到 读读该死的手册（RTFM） 的回复，发信人认为你应该去“读读该死的手册”。他或她多半是对的，去读一下吧。\n“读读该死的手册”（RTFM）有个年轻一点的亲戚，如果你收到“搜搜该死的网络”（STFW）的回复，发信人认为你应该“搜搜该死的网络”。那人多半也是对的，去搜一下吧。(更温和一点的说法是“谷歌是你的朋友！”)\n在论坛，你也可能被要求去搜索论坛的文档。事实上，有人甚至可能热心地为你提供以前解决此问题的线索。但不要依赖这种关照，提问前应该先搜索一下文档。\n通常，叫你搜索的人已经打开了能解决你问题的手册或网页，正在一边看一边敲键盘。这些回复意味着他认为：\n 第一，你要的信息很容易找到。 第二，自已找要比别人喂到嘴里能学得更多。  你不应该觉得这样就被冒犯了，按黑客的标准，回复者没有不理你就是在向你表示某种尊敬，你反而应该感谢他热切地想帮助你。\n如果还不明白…… 如果你看不懂回答，不要马上回复一个要求说明的消息，先试试那些最初提问时用过的相同工具（如手册、FAQ、网页、懂行的朋友等）试着搞懂回答。如果还是需要说明，展现你已经明白的。\n譬如，假如我告诉你：“看起来象是某输入项有问题，你需要清除它”，接着是个 不好 的回帖：“什么是某输入项？”。而这是一个 很好 的跟帖：“是的，我读了手册，某某输入项只在 -z 和 -p 开关中被提到，但都没有涉及到如何清除它们，你指的是哪一个还是我弄错了什么？”\n对待无礼 很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当、一针见血式的交流风格，这种风格对于更关注解决问题而不是使别人感觉舒服而混乱的人是很自然的。\n如果你觉得被冒犯了，试着平静地反应。如果有人真的做了过格的事，邮件列表、新闻组或论坛中的前辈多半会招呼他。如果这 没有 发生而你却光火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而 你 将被视为有错的一方，这将伤害到你获取信息或帮助的机会。\n另一方面，你会偶而真的碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击、用犀利的语言将其驳得体无完肤都是可以接受的。然尔，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外来者，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。\n（有些人断言很多黑客都有轻度的自闭症或阿斯伯格综合症，缺少用于润滑人类社会“正常”交往所需的脑电路。这既可能是真也可能是假。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们 喜欢 现在这个样子，并且一般都对病号标记有站得住脚的怀疑。）\n在下一节，我们会谈到另一个问题，当 你 行为不当时会受到的“冒犯”。\n别象失败者那样反应 在黑客社区的论坛中有那么几次你可能会搞砸──以本文描述或类似的方式。你会被示众是如何搞砸的，也许言语中还会带点颜色。\n这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反，你该这样去做：\n熬过去，这很正常。事实上，它是有益健康与恰当的。\n社区的标准不会自己维持，它们是通过参与者积极而 公开 地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，这不是事情运作的方式。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。\n也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称“如果你不想帮助用户就闭嘴”。有思路的参与者纷纷离开的结果只会使它们变成了毫无意义的唠叨与无用的技术论坛。\n是夸张的“友谊”（以上述方式）还是有用？挑一个。\n记着：当黑客说你搞砸了，并且(无论多么刺耳地)告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤除要容易得多。如果你无法做到感谢，至少要有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人象对待脆弱的洋娃娃那样对你。\n有时候，即使你没有搞砸（或者只是别人想象你搞砸了）， 有些人也会无缘无故地攻击你本人。在这种情况下，报怨倒是 真的 会把问题搞砸。\n这些找茬者要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些找茬者在给自己找麻烦，这点你不用操心。\n也别让自己卷入口水战，大多数口水战最好不要理睬──当然，是在你核实它们只是口水战、没有指出你搞砸的地方，而且没有巧妙地将问题真正的答案藏于其中之后（这也是可能的）。\n提问禁忌 下面是些典型的愚蠢问题和黑客不回答它们时的想法。\n问：我到哪可以找到某程序或 X 资源？\n问：我怎样用 X 做 Y？\n问：如何配置我的 shell 提示？\n问：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？\n问：我的{程序、配置、SQL 语句}不运行了\n问：我的视窗电脑出问题了，你能帮忙吗？\n问：我的程序不运行了，我认为系统工具X有问题\n问：我安装 Linux 或 X 遇到困难，你能帮忙吗？\n问：我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？\n问：\n 我到哪可以找到某程序或 X 资源？\n 答：\n 在我找到它的同样地方，笨旦──在网页搜索引擎上。上帝啊，难道还有人不知道如何使用 谷歌 吗？\n 问：\n 我怎样用 X 做 Y？\n 答：\n 如果你想解决的是 Y，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对要解决的 Y 问题糊涂，还被特定形势禁锢了思维。等他们把问题弄好再说。\n 问：\n 如何配置我的 shell 提示？\n 答：\n 如果你有足够的智慧提这个问题，你也该有足够的智慧去 “读读该死的手册”（RTFM），然后自己去找出来。\n 问：\n 我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文档转为 TeX 格式吗？\n 答：\n 试试就知道了。如果你试过，你既知道了答案，又不用浪费我的时间了。\n 问：\n 我的{程序、配置、SQL 语句}不运行了\n 答：\n 这不是一个问题，我也没有兴趣去猜你有什么问题──我有更要紧的事要做。看到这种东西，我的反应一般如下：\n  你还有什么补充吗？ 噢，太糟了，希望你能搞定。 这跟我究竟有什么关系？  问：\n 我的视窗电脑出问题了，你能帮忙吗？\n 答：\n 是的，把视窗垃圾删了，装个象 Linux 或 BSD 的开源操作系统吧。\n 注意：如果程序有官方的视窗版或者与视窗有交互(如 Samba)，你 可以 问与视窗相关的问题，只是别对问题是由视窗操作系统而不是程序本身造成的回复感到惊讶，因为视窗一般来说太差，这种说法一般都成立。\n问：\n 我的程序不运行了，我认为系统工具 X 有问题\n 答：\n 你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文档作后盾。\n 问：\n 我安装 Linux 或 X 遇到困难，你能帮忙吗？\n 答：\n 不行，我需要亲手操作你的电脑才能帮你排错，去向当地的 Linux 用户组寻求方便的帮助（你可以在 这里 找到用户组列表）\n 注意：如果安装问题与某 Linux 发行版有关，在针对 它 的邮件列表、论坛或本地用户组织中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 “linux”和 所有 被怀疑的硬件 [作关键词] 仔细搜索。\n问：\n 我如何才能破解超级用户口令/盗取通道操作员的特权/查看某人的电子邮件？\n 答：\n 想做这种事情说明你是个卑劣的家伙，想让黑客教你做这种事情说明你是个白痴。\n 好问题与坏问题 最后，我将通过举例来演示提问的智慧。同样的问题两种提法，一种愚蠢，另一种明智。\n愚蠢：我在哪能找到关于 Foonly Flurbamatic 设备的东西？\n 这个问题在乞求得到 “搜搜该死的网络”（STFW） 式的回复。\n 明智： 我用谷歌搜索过“Foonly Flurbamatic 2600”，但没有找到什么有用的，有谁知道在哪能找到这种设备的编程信息？\n 这个人已经搜索过网络了，而且听起来他可能真的遇到了问题。\n 愚蠢： 我不能编译某项目的源代码，它为什么这么破？\n 提问者假设是别人搞砸了，太自大了。\n 明智： 某项目的源代码不能在某 Linux 6.2 版下编译。我读了常见问题文档，但其中没有与某 Linux 相关的内容。这是编译时的记录，我做错了什么吗？\n 提问者已经指明了运行环境，读了常见问题文档（FAQ），列出了错误，也没有假设问题是别人的过错，这家伙值得注意。\n 愚蠢： 我的主板有问题，谁能帮我？\n 某黑客对此的反应可能是：“是的，还需要帮你拍背和换尿布吗？”，然后是敲下删除键。\n 明智： 我在 S2464 主板上试过 X、Y 和 Z，当它们都失败后，又试了 A、B 和 C。注意我试 C 时的奇怪症状，显然某某东西正在做某某事情，这不是期望的行为。通常在 Athlon MP 主板上导致某某事情的原因是什么？有谁知道我还能再试点什么以确定问题？\n 相反地，这个人看来值得回答。他或她展现了解决问题的能力而不是坐等天上掉馅饼。\n 在最后那个问题中，注意“给我一个回答”与“请帮我看看我还能再做点什么测试以得到启发”之间细微但重要的差别。\n事实上，最后那个问题基本上源于 2001 年 8 月 Linux 内核邮件列表（lkml）上的真实事件，是我（Eric）当时提了那个问题，我发现 Tyan S2462 主板有神秘的死机现象，邮件列表成员给我提供了解决此问题的关键信息。\n通过这种提问方式，我给了别人可以咀嚼玩味的东西。我设法使之对参与者既轻松又有吸引力，也表明了对同行能力的尊敬并邀请他们与我一起协商。通过告诉他们我已经走过的弯路，我还表明了对他们宝贵时间的尊重。\n事后，当我感谢大家并评论这次良好的经历时，一个 Linux 内核邮件列表的成员谈到，他认为我得到答案并不是因为我的名字挂在列表上，而只是因为我正确的提问方式。\n黑客们在某种方面是非常不留情面的精英分子。我想在这事上他是对的，如果我 表现得 象个不劳而获的寄生虫，不管我是谁都会被忽略或斥责。他建议将整个事件作为对其它人提问的指导，这直接导致了本文的编写。\n如果得不到回答 如果得不到回答，请不要认为我们不想帮你，有时只是因为被问到的小组成员的确不知道答案。没有回复不等于不被理睬，当然必须承认从外面很难看出两者的差别。\n一般而言，直接将问题再张贴一次不好，这会被视为毫无意义的骚扰。耐心一点，知道你问题答案的人可能生活在不同的时区，有可能正在睡觉，也有可能你的问题一开始就没有组织好。\n还有其它资源可以寻求帮助，通常是在一些面向新手的资源中。\n有许多在线与本地的用户组织，虽然它们自己不编写任何软件，但是对软件很热心。这些用户组通常因互助和帮助新手而形成。\n还有众多大小商业公司提供签约支持服务，别因为要付点钱才有支持就感到沮丧！毕竟，如果你车子的汽缸垫烧了，你多半还得花钱找个修理店把它弄好。即使软件没花你一分钱，你总不能指望服务支持都是免费的。\n象 Linux 这样流行的软件，每个开发者至少有一万个以上的用户，一个人不可能应付这么多用户的服务要求。记住，即使你必须付费才能得到支持，也比你还得额外花钱买软件要少得多（而且对封闭源代码软件的服务支持与开源软件相比通常还要贵一点，也要差一点）。\n如何更好地回答 态度和善一点。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。\n对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找 FAQ 都不知道。\n如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来象个专家好玩就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。\n如果帮不了忙，别妨碍。 不要在具体步骤上开玩笑，那样也许会毁了用户的安装──有些可怜的呆瓜会把它当成真的指令。\n探索性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西──你也可以。试试将很差的问题转变成好问题，别忘了我们都曾是新手。\n尽管对那些懒虫报怨一声“读读该死的手册”（RTFM）是正当的，指出文档的位置（即使只是建议做个谷歌关键词搜索）会更好\n如果你决意回答，给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计，应推荐更好的工具，重新组织问题。\n请回答真正的问题！如果提问者已经做了自己该做的研究，并且说明尝试过 X，Y，Z，A，B 与 C 都没有得到想要的結果，那么回复 试试 A 或 B 或者给出一个内容为 试一下 X，Y，Z，A，B 或 C 的链接将极其无益！\n帮助你的社区从中学习。当回复一个好问题时，问问自己 如何修改相关文件或 FAQ 文档以免再次解答同样的问题？，接着再向文档维护者发一份补丁。\n如果你是在研究一番后才做出的回答，展现你的技巧而不是直接端出结果。毕竟“授人以鱼，不如授人以渔”。\n相关资源 如果需要个人电脑、Unix 和互联网如何工作的基础知识，参阅 Unix 和互联网工作的基本原理。\n当你发布软件或补丁时，试着按 软件发布实践 操作。\n鸣谢 伊夫林.米切尔（Evelyn Mitchell）贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节，米哈伊尔.罗门迪克（Mikhail Ramendik）贡献了一些特别有价值的建议和改进。\n","description":"站内常驻转载文：提问的智慧","id":1,"section":"posts","tags":null,"title":"提问的智慧","uri":"https://blog.calvinhaynes.top/posts/%E6%8F%90%E9%97%AE%E7%9A%84%E6%99%BA%E6%85%A7/"},{"content":"前言  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\n Git 是一个免费开源的分布式版本控制系统，最初由 Linux 之父 Linus 开发，它诞生的原因就是 Linus 希望有一个工具便于管理 Linux 内核代码的更新迭代，而且分布式的结构比集中式更加稳定并且更利于团队协作，因为每个用户主机都可以拥有一个完整的版本库，而且大家可以工作于不同分支最后合并为一个分支。\n1 - Git的安装   官网安装：Downloads\n  Windows 系统包管理器 Chocolatey 安装\n  1  choco install git    Linux 系统安装（ubuntu）  1  apt-get install git   2 - Git 中一些术语的解释和理解  下面会对Git中各种术语进行一些通俗易懂的解释，方便大家快速明白Git中各个术语的功能和含义，具体术语解释的官方手册地址我在每个术语的括号中的英文原词加上了超链接，大家想仔细了解的话可以点进去认真阅读。\n  远程仓库名称（remote name）：简单来说它就是远程仓库（URL链接）映射在本地的一个别名/标签，纯粹是为了方便在本地可以方便的选择远端（通常这个别名会自定义为远程仓库内容的概括）进行代码提交和更新，默认是 origin，也可以在本地通过命令修改，通常一个本地的文件夹可以关联很多个远程仓库，然后可以同时使用和更新多个远程仓库的代码。 分支（branch）：在项目开发中，通常对于新功能开发或者很多部门分工合作，分支和合并功能是一个非常好的方式，通常有一个主要用于发布项目的主分支，然后其他从主分支创建出来的子分支会在开发测试完毕后合并（merge）到主分支中。 Git的一些操作术语  克隆（clone）：从远端服务器将一个git项目下载到本地。 合并（merge）：将一个分支的内容合并到另一个分支上（这个分支一般是发布项目的稳定项目分支），如果存在分支冲突（conflicts）的话需要手动解决再将冲突的文件重新merge。 获取（fetch）：fetch只从远端获取了远端相对于本地更新的数据，但并不会合并到本地的分支上，需要用户手动合并到本地的分支上。 拉取（pull）：git pull = git fetch + git merge**，从远程仓库获取最新版本并直接合并到相对应的本地分支上，一般同步远程仓库和本地仓库就用pull一条指令就够了。 索引更改（add）：将任何变化的文件（增加、删除、修改）放入暂存区。 提交（commit）：将暂存区里的改动提交到本地的版本库。每次使用git commit命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id，commit-id在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与git reset的组合命令回到这里 上传（push）：将本地的分支版本库上传到远程分支并合并。     相信大家第一次看了上面的术语有可能也不是很理解，所以在后面我会写一个很长的例子方便大家理解和梳理Git使用的整个流程，继续看下去吧！\n 3 - 玩转 Git CLI  对于 CLI （Command Line Interface 命令行接口）本身确实是不如 GUI 图形化界面的软件使用起来方便的，但是由于大部分服务器的操作系统都是 Linux，在远程连接服务器我们往往在命令行界面是最为轻便和稳定的，所以学习 Git 的 CLI 操作是必不可少的，而且计算机程序的命令行版本一直是我觉得计算机领域最优雅的部分，少了很多视觉跟踪和鼠标的点击操作，我们只需要集中于屏幕光标位置利用键盘说出我们想让计算机做的事就可以了，非常的优雅！\n还有重要的一点就是，Git 的 CLI 包含 Git 的全部内容/所有功能，而 GUI 软件往往不能发挥 Git 的全部作用。\n以下仅仅介绍一些常用的 Git 命令，完整的 CLI命令大家可以参考官方文档\n git clone 1 2 3  git clone \u0026lt;远程仓库链接\u0026gt; \u0026lt;本地目录\u0026gt; //example git clone https://github.com/CalvinHaynes/MIT6.S081-2020Fall.git /usr/gittest   git pull 1 2 3 4  git pull \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt; //example：将远程主机origin的master分支拉取过来，与本地的main分支合并。 git pull origin master:main //如果上述没有冒号，则表示将远程origin仓库的master分支拉取下来与本地当前分支合并   git commit 1 2 3 4  //一般需要在 git commit 之前使用 git add 来暂存修改的文件 //但是也可以采用下面的方式简化这一步骤 git commit -am \u0026#34;关于提交内容的解释\u0026#34; //此时再使用 git status 来检查文件状态就会得到：nothing to commit, working tree clean   git push 1 2 3 4 5  git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt; //如果本地分支名与远程分支名相同，则可以省略冒号： git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt; //example git push origin main:master   git status 1 2  //查看文件状态（是否需要暂存、是否需要提交） git status   git remote 1 2 3 4 5 6 7 8  //查看和管理本地的远程仓库名称 //1、查看所有远程仓库 git remote git remote -v //2、重命名远程仓库 git remote rename \u0026lt;old\u0026gt; \u0026lt;new\u0026gt; //3、新增一个远程仓库 git remote add \u0026lt;name\u0026gt; \u0026lt;url\u0026gt;   git branch 1 2 3 4 5 6 7 8 9 10  //1、查看所有branch git branch -a //2、创建新分支，所有新分支都是基于默认分支 git branch \u0026lt;新分支名字\u0026gt; //3、删除分支 git branch -d \u0026lt;删除分支的名字\u0026gt; //强制删除 git branch -D \u0026lt;删除分支的名字\u0026gt; //4、将当前分支重命名为＜branch＞ git branch -m \u0026lt;branch\u0026gt;   git switch  注意一定要保证分支是干干净净的再切换分支（即文件改动均已commit和push了）\n 1 2 3 4  //1、切换分支 git switch \u0026lt;要切换到的分支名\u0026gt; //2、创建一个新分支并切换到该新分支 git switch -c \u0026lt;branchName\u0026gt;   git merge \u0026amp; git mergetool（解决冲突） 1 2 3 4 5  //1、将分支合并到默认分支上 git merge \u0026lt;被合并的分支\u0026gt; //2、解决合并冲突问题，利用mergetool，具体配置请看[**这篇文章**](https://panmenglin.github.io/satellite-log/notes/tools/tools-merge-tool.html) git mergetool //如果使用的是vimdiff，请戳[这里](https://kinboyw.github.io/2018/10/09/Use-Vimdiff-As-Git-Mergetool/)   小结（上述命令精简）  git clone \u0026lt;远程仓库链接\u0026gt; \u0026lt;本地目录\u0026gt; git pull \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt; git commit -am \u0026quot;关于提交内容的解释\u0026quot; git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt; git status git remote -v git switch \u0026lt;要切换到的分支名\u0026gt; git branch -a git branch -d \u0026lt;删除分支的名字\u0026gt; git branch \u0026lt;新分支名字\u0026gt; git merge \u0026lt;被合并的分支\u0026gt; git mergetool  4 - 玩转 Git GUI  关于Git的GUI （Graphic User Interface） 图形化界面软件有很多，在官网上有一个所有GUI的清单，但是这其中我个人最为推荐的还是github官方的GUI：Github Desktop ，有关于其他程序猿的生产力软件推荐可以看我下面这篇文章：\n属于每一个程序猿和学生的一份高效率软件清单\u0026ndash;第一弹:程序猿高效开发工具（持续更新）\n  主要操作界面分区如下：   其他操作建议查看官网的手册，中文版的看起来也很舒服：https://docs.github.com/cn/desktop  5 - 玩转 GitHub  Github是全球最大的开源代码服务器，利用Github可以很好的托管开源作者的代码，也可以方便其他人使用和借鉴，下面我将介绍几个让你的Github用的更爽的插件和建议，关于Github的使用我下面不会再讲解，如何使用可以看官方指南：\n开始使用 GitHub - GitHub Docs\n 1 - Octotree浏览器插件  这个插件使得在Github上阅读代码更舒服，将Github项目的文件夹分层显示在左侧像IDE一样直观，使用效果如下：\n 2 - Github Web IDE 浏览器插件  这个插件集成了多个云平台IDE厂商的产品，可以进入在线IDE查看代码，甚至可以搭建云环境进行在线运行，使用效果如下：\n 3 - Github Gist  Github Gist可以在远端存储代码段，相当于自己有了一个云存储空间用于存一些常用的配置文件的代码段，或者是一些算法的代码段，十分的不戳！！\n 4 - Github 个性个人简介  这是Github的一个彩蛋吧算是，只要你创建一个和自己Github账户名相同的Github仓库（一定要增加README.md文件，语法格式戳这里）就可以在你的Github主页上展示下面这种效果的自我介绍（大家也可以去我的Github主页上看下效果）：\n 具体教程可以参考以下这篇文章：\n来弄一个Github的个人介绍页吧~ - 掘金\n6 - Git工作流讲解 Git基本工作流图片 通过一个故事理解Git工作流 小明是一个刚刚毕业的大学生，被一家知名的互联网企业签下了，由于第一次参与企业级大型项目，所以对于复杂的Git工作流十分的不熟悉，于是公司的老员工们纷纷来帮助他。\n小明先是打开了公司开源的Git仓库地址，并利用Git工具clone下来了项目的代码，但是一看到上百条分支就头晕了，于是老员工Jack拿出了上面那张Git基本工作流的图片来一一为他讲解，Jack说：其实呢，之所以创建这么多的分支的原因就是为了方便基于老代码进行的优化和更新的新代码能够根据不同的变化占有一个分支，将一大个复杂的问题分类成一个个小的问题，从而下派给各个部门进行工作，这样不同的部门各自管理一条各自的分支，工作就井然有序啦！\n小明说：哦，原来是这样，那这个图上这些分支的名字都代表什么含义呢？\n这时另一名老员工Smith说：这张图呢是我们企业最初一张基本的Git工作流的图咯，现在已经非常复杂了，不过对于你初步理解整个流程是非常好的，那么这个Master分支，顾名思义就是我们的主分支啦，是我们所有部门整合起来的一个主分支，代表了我们项目整体的走向，每次一个子分支完成测试后就将其 merge 到 Master 分支然后再进行整体的测试，如果一个版本的功能已经完成全部测试，那么就将其发放到 Release 分支啦，也就是正式发行给大众的分支，就像咱们平时使用的某一款软件的一个版本更新一样（类比上图就相当于基于 Master 分支创建了一个 Develop 分支，然后 Develop 分支开发到一定程度后将其 merge 到 Release 分支和 Master 分支），那么图中的 HotFix 分支顾名思义就是处理一些突发bug的分支，进行快速修改再重新 Merge 到 Master 分支，Feature 分支就是代表一个个新功能的分支。\n小明说：哦，原来如此，明白了，那我就利用手上的Git工具进行一下实践试试看咯！\n另一名老员工小姐姐Mary说：嗯嗯，有什么问题可以继续问我们哦，哦对了，你有没有考虑过这样一种情况呢，如果在 Master 分支的某一个节点创建了一个子分支，并在子分支对文件1进行了修改，与此同时 Master 分支也对文件1进行了修改，然后子分支 Merge 到了 Master 分支，这时候怎么处理呐！\n小明说：哦，这不是合并冲突嘛！通常我们就手动的查看冲突的内容，通过一些解决冲突的工具，比如 mergetool 或者是 IDE 中的一些插件，然后选择自己想要留下的那个文件的内容就可以啦！解决冲突之后再进行 Merge\n大家露出了欣慰的表情，都回到了自己的工位。。。。。\n结语 创作不易，整理这些内容花费了很大精力，希望大家能有所收获，能尽快熟练使用Git，毕竟coding的产品必然是要走向大众的，一个代码产品的诞生和管理需要一个好的版本控制工具，Git在众多的版本控制工具中无疑是每个程序猿的不二之选，无论是独立开发者亦或是团队开发，Git都是一大利器！\n感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n","description":"对Git和Github的使用和历史讲解，旨在于让读者掌握Git的精髓和意义","id":2,"section":"posts","tags":["Github"],"title":"一文教你玩转Git和Github","uri":"https://blog.calvinhaynes.top/posts/%E4%B8%80%E6%96%87%E6%95%99%E4%BD%A0%E7%8E%A9%E8%BD%ACgit%E5%92%8Cgithub/"},{"content":"前言 上一篇文章我写了如何利用Docker搭建一个Hadoop-muti-node-cluster，从中我们得知Hadoop可以通过MapReduce机制实现一些计算任务，但是由于MapReduce任务需要跑很多次而且需要多次迭代，每次迭代计算结果都要存到HDFS中，而HDFS本质上就是硬盘，相当于把每次运算结果写入硬盘，而且还要考虑备份的问题，所以在MapReduce的传统计算中存储占用了绝大部分时间。而Spark不同，它是将中间计算结果存储在内存中并直接在内存中执行迭代计算，速度会更快（CPU直接访问内存速度远远快于访问磁盘），是现在非常流行的通用云计算引擎/框架。\n 官网描述： Apache Spark 是用于大规模数据处理的统一分析引擎。它提供了 Java、Scala、Python 和 R 中的高级 API，以及支持通用执行图的优化引擎。它还支持一组丰富的更高级别的工具，包括SparkSQL用于SQL和结构化数据的处理，MLlib机器学习，GraphX用于图形处理，以及结构化流的增量计算和流处理。\n 1 - 搭建前注意事项 官网说明： Spark 应用程序作为集群上的独立进程集运行，由SparkContext 主程序（称为驱动程序）中的对象协调。\n具体来说，为了在集群上运行，SparkContext 可以连接到多种类型的集群管理器 （Spark 自己的独立集群管理器、Mesos、YARN 或 Kubernetes），它们在应用程序之间分配资源。连接后，Spark 会在集群中的节点上获取执行程序，这些进程为您的应用程序运行计算和存储数据。接下来，它将您的应用程序代码（由传递给 SparkContext 的 JAR 或 Python 文件定义）发送到执行程序。最后，SparkContext 将任务发送给执行程序以运行。\nSpark支持的集群管理器如下：\n Standalone– Spark 附带的简单集群管理器，可以轻松设置集群。 Apache Mesos – 一个通用的集群管理器，也可以运行 Hadoop MapReduce 和服务应用程序。（已弃用） Hadoop YARN – Hadoop 2 中的资源管理器。 Kubernetes – 一个开源系统，用于自动部署、扩展和管理容器化应用程序。   由以上说明在不同的集群模式（即选用不同的集群管理器）下，Spark有不同的部署方法，本文选用最简单的Standalone模式部署（其实Docker和Kubernetes搭建更好，最近没时间学，之后再写相关文章吧）\n 2 - 下载Spark\u0026amp;Scala  要安装 Spark Standalone 模式，您只需在集群的每个节点上放置一个编译版本的 Spark。\n  关于Spark的下载，一定要寻找对应Hadoop版本的Spark，否则可能会出现奇奇怪怪的问题。  Spark下载网址在这里：https://spark.apache.org/downloads.html   按照Spark下载网站上的说明下载对应的Scala版本（比如下面这个版本官网的说明就是建议下载Scala2.12版本）  Scala下载网址在这里：https://www.scala-lang.org/download/     关于二者的下载，如果看过我上篇文章的读者，应该已经发现在上篇文的Dockerfile中我已经下载了相应版本的Spark和Scala\n 3 - 配置环境变量 设置一下Spark必须用到的环境变量：（将下面这些环境变量配置的键值对写入~/.bashrc）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  #SCALA Variables export PATH=${JAVA_HOME}/bin:${PATH} export HADOOP_CLASSPATH=${JAVA_HOME}/lib/tools.jar export SCALA_HOME=/usr/local/scala export PATH=$PATH:$SCALA_HOME/bin export PATH=$PATH:$SCALA_HOME/sbin #SCALA Variables #SPARK Variables export SPARK_HOME=/usr/local/spark export PATH=$PATH:$SPARK_HOME/bin export SPARK_DIST_CLASSPATH=/usr/local/hadoop/bin/hadoop export PYTHONPATH=$SPARK_HOME/python/:$SPARK_HOME/python/lib/py4j-0.10.6-src.zip:$PYTHONPATH export PATH=$PATH:$SPARK_HOME/sbin #SPARK Variables   更新bash配置：\n1  source ~/.bashrc   4 - 配置Spark配置文件（conf目录） 1 - spark-env.sh文件   将下面这些配置写入$SPARK_HOME/conf目录下的spark-env.sh配置文件中（其中SPARK_MASTER_HOST出换成你master的ip地址，或者直接写master应该也可以）\n  注意，当Spark安装时，conf/spark-env.sh默认是不存在的。你可以复制conf/spark-env.sh.template创建它（cp spark-env.sh.template spark-env.sh），其他配置文件也同理。\n  1 2 3 4 5 6 7 8 9 10  export SPARK_DIST_CLASSPATH=/usr/local/hadoop/bin/hadoop export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 export SCALA_HOME=/usr/local/scala export HADOOP_HOME=/usr/local/hadoop export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop export SPARK_MASTER_HOST=172.18.0.2 export SPARK_HOME=/usr/local/spark export SPARK_WORKER_CORES=1 export SPARK_WORKER_MEMORY=512m export SPARK_WORKER_INSTANCES=2   2 - Workers # # Licensed to the Apache Software Foundation (ASF) under one or more # contributor license agreements. See the NOTICE file distributed with # this work for additional information regarding copyright ownership. # The ASF licenses this file to You under the Apache License, Version 2.0 # (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with # the License. You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # A Spark Worker will be started on each of the machines listed below. # 在这里写上包括master节点在内的所有工作节点 master slave1 slave2 3 - log4j.properties  打印Spark运行日志，方便后期排错和检查运行情况  # # Licensed to the Apache Software Foundation (ASF) under one or more # contributor license agreements. See the NOTICE file distributed with # this work for additional information regarding copyright ownership. # The ASF licenses this file to You under the Apache License, Version 2.0 # (the \u0026#34;License\u0026#34;); you may not use this file except in compliance with # the License. You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \u0026#34;AS IS\u0026#34; BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # # Set everything to be logged to the console log4j.rootCategory=WARN, console log4j.appender.console=org.apache.log4j.ConsoleAppender log4j.appender.console.target=System.err log4j.appender.console.layout=org.apache.log4j.PatternLayout log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n # Set the default spark-shell/spark-sql log level to WARN. When running the # spark-shell/spark-sql, the log level for these classes is used to overwrite # the root logger\u0026#39;s log level, so that the user can have different defaults # for the shell and regular Spark apps. log4j.logger.org.apache.spark.repl.Main=WARN log4j.logger.org.apache.spark.sql.hive.thriftserver.SparkSQLCLIDriver=WARN # Settings to quiet third party logs that are too verbose log4j.logger.org.sparkproject.jetty=WARN log4j.logger.org.sparkproject.jetty.util.component.AbstractLifeCycle=ERROR log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper=INFO log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter=INFO log4j.logger.org.apache.parquet=ERROR log4j.logger.parquet=ERROR # SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler=FATAL log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry=ERROR # For deploying Spark ThriftServer # SPARK-34128：Suppress undesirable TTransportException warnings involved in THRIFT-4805 log4j.appender.console.filter.1=org.apache.log4j.varia.StringMatchFilter log4j.appender.console.filter.1.StringToMatch=Thrift error occurred during processing of message log4j.appender.console.filter.1.AcceptOnMatch=false 5 - 启动Spark   可以使用以下 shell 脚本启动或停止集群，基于 Hadoop 的部署脚本，并在$SPARK_HOME/sbin以下位置可用：\n sbin/start-master.sh - 在执行脚本的机器上启动主实例。 sbin/start-workers.sh- 在conf/workers文件中指定的每台机器上启动一个工作实例。 sbin/start-worker.sh - 在执行脚本的机器上启动一个工作实例。 sbin/start-all.sh - 如上所述启动一个主节点和多个工作节点。 sbin/stop-master.sh- 停止通过sbin/start-master.sh脚本启动的 master 。 sbin/stop-worker.sh - 停止执行脚本的机器上的所有工作实例。 sbin/stop-workers.sh- 停止conf/workers文件中指定的机器上的所有工作实例。 sbin/stop-all.sh - 如上所述停止主节点和工作节点。    使用jps就可以看到现在正在运行的进程了\n  6 - 启动spark-shell并测试运行一个简单的Scala字数计算程序  启动Spark-shell：  spark-shell  完整代码如下：  1 2 3 4 5 6 7 8  # 接续上次文章中上传的文件 val textFile = sc.textFile(\u0026#34;hdfs:///calvinhaynes/README.txt\u0026#34;) textFile.first() val wordCount = textFile.flatMap(line =\u0026gt; line.split(\u0026#34; \u0026#34;)).map(word =\u0026gt; (word, 1)).reduceByKey((a,b) =\u0026gt; a+b) wordCount.collect() textFile.count() textFile.take(10) :quit    运行效果如下：  结语 作为上一篇文章的补充，简单了解一下Spark这个现在流行的通用云计算框架。\n感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n","description":"基于Docker的Hadoop集群配置Spark并简单使用","id":3,"section":"posts","tags":["Docker","Hadoop","Spark"],"title":"基于Docker的Hadoop集群配置Spark并简单使用","uri":"https://blog.calvinhaynes.top/posts/%E5%9F%BA%E4%BA%8Edocker%E7%9A%84hadoop%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AEspark%E5%B9%B6%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"},{"content":"前言 最近上了一门关于云计算\u0026amp;大数据的课，课堂上有留一些大作业，所以我也想借此简单的入门一下这个领域，并记下此文作为总结和回顾，同时也方便让大家一起简单认识一下这门技术。\n这次大作业一的要求就是搭建一个Hadoop的多节点服务器集群，要求是三个节点，一个master和两个slave，老师的建议是虚拟机搭集群，但是由于跑虚拟机占用资源太多（虚拟机加上图形界面本身就很大很吃资源，然后还要创建多个虚拟机，很麻烦），而且Docker容器化虚拟技术的诞生本就是更容易也更适合做服务器集群的（之前有幸学了一点Docker真是赚到了诶嘿嘿）\n但是仅仅按照步骤搭建这个环境就没什么意思了，所以我也想简单理解一下这些配置文件和一些名词，和大数据的一些思想，在文章的末尾我会添加一个版块专门写我查找的很多优质资料以及我的一些学习见解。\n那么下面我们首先开始搭建步骤的详解，毕竟这才是这个文章的主线！\n搭建思路的顺序图 上图可能有点小，而且未来会有变动，建议大家也在下面这个网站上查看这个思维导图的完整版（感谢知犀思维导图的在线查看的功能，真的很感谢这个开源的思维导图软件）\n链接：https://www.zhixi.com/view/dca65eb3 密码：2426\n 知犀思维导图的官方推荐文案，感兴趣的小伙伴试一试吧，是真的良心！！\n发现一个好用的思维导图软件，知犀思维导图（免费）。有几千个免费优质模板，不用开会员，节点数不限制，直接导出高清无水印图片，还支持导出PDF，Word。很强大很良心，颜值还挺高，知犀有在线版、电脑版，还有手机App，多端云同步，推荐试试：https://www.zhixi.com/\n 1 - 写基础环境的Dockerfile并build一个image Dockerfile如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  # 实验一利用Hadoop搭建服务器集群的基础环境DockerfileFROMubuntu:20.04ARG arch_name=amd64 # 1.备份源列表RUN cp /etc/apt/sources.list /etc/apt/sources.backup.list# 2.把本目录下的sources.list中的镜像源添加到Docker中，下载速度起飞COPY sources.list /etc/apt/sources.list# 3.更新源RUN apt-get update # 翻墙代理# RUN export hostip=$(cat /etc/resolv.conf |grep -oP \u0026#39;(?\u0026lt;=nameserver\\ ).*\u0026#39;) \u0026amp;\u0026amp; \\# export https_proxy=\u0026#34;http://${hostip}:7890\u0026#34; \u0026amp;\u0026amp; \\# export http_proxy=\u0026#34;http://${hostip}:7890\u0026#34;# 设置一些环境变量ENV TZ=Asia/Shanghai \\  LANG=en_US.utf8 \\  LANGUAGE=en_US.UTF-8 \\  DEBIAN_FRONTEND=noninteractive# 安装一些Hadoop集群需要的基本环境和辅助程序RUN apt-get install -y openjdk-8-jdk sudo vim ssh openssl wget openssh-server openssh-client net-tools iputils-ping# pdsh全称是parallel distributed shell，可以并行执行对远程目标主机的操作，利于解决批量执行命令或分发任务的运维需求。# 适用于大批量服务器的配置，部署，文件复制等运维操作。RUN apt-get install -y pdsh \u0026amp;\u0026amp; \\  echo ssh \u0026gt;\u0026gt; /etc/pdsh/rcmd_default# SSH配置RUN ssh-keygen -t rsa -P \u0026#34;\u0026#34; -f ~/.ssh/id_rsa \u0026amp;\u0026amp; \\  cat ~/.ssh/id_rsa.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys \u0026amp;\u0026amp; \\  chmod 600 ~/.ssh/authorized_keys \u0026amp;\u0026amp; \\  chmod 700 ~/.ssh \u0026amp;\u0026amp; \\  echo \u0026#34;service ssh start\u0026#34; \u0026gt;\u0026gt; ~/.bashrc # 安装HadoopRUN wget https://dlcdn.apache.org/hadoop/common/hadoop-3.2.2/hadoop-3.2.2.tar.gz \u0026amp;\u0026amp; \\  tar -xzf hadoop-3.2.2.tar.gz \u0026amp;\u0026amp; \\  mv hadoop-3.2.2 /usr/local/hadoop \u0026amp;\u0026amp; \\  rm hadoop-3.2.2.tar.gz # 安装ScalaRUN wget https://downloads.lightbend.com/scala/2.12.6/scala-2.12.6.tgz \u0026amp;\u0026amp; \\  tar -xzf scala-2.12.6.tgz \u0026amp;\u0026amp; \\  mv scala-2.12.6 /usr/local/scala \u0026amp;\u0026amp; \\  rm scala-2.12.6.tgz# 安装SparkRUN wget https://dlcdn.apache.org/spark/spark-3.2.0/spark-3.2.0-bin-hadoop3.2-scala2.13.tgz \u0026amp;\u0026amp; \\  tar -xzf spark-3.2.0-bin-hadoop3.2-scala2.13.tgz \u0026amp;\u0026amp; \\  mv spark-3.2.0-bin-hadoop3.2-scala2.13 /usr/local/spark \u0026amp;\u0026amp; \\  rm spark-3.2.0-bin-hadoop3.2-scala2.13.tgz# 创建一些目录，一会儿配置Hadoop文件要用到RUN mkdir -p /usr/local/hadoop/hadoop_data/hdfs \u0026amp;\u0026amp; \\  mkdir -p /usr/local/hadoop/hadoop_data/hdfs/tmp \u0026amp;\u0026amp; \\  mkdir -p /usr/local/hadoop/hadoop_data/hdfs/namenode \u0026amp;\u0026amp; \\  mkdir -p /usr/local/hadoop/hadoop_data/hdfs/datanode \u0026amp;\u0026amp; \\  mkdir -p /usr/local/hadoop/hadoop_data/hdfs/edits \u0026amp;\u0026amp; \\  mkdir -p /usr/local/hadoop/hadoop_data/hdfs/checkpoints \u0026amp;\u0026amp; \\  mkdir -p /usr/local/hadoop/hadoop_data/hdfs/checkpoints/edits# 开放Hadoop相关端口，方便外部进行访问EXPOSE8088 50090 9864 19888 50070 8080CMD [\u0026#34;/bin/bash\u0026#34;]   从上述Dockerfile中不难看出这步仅仅是安装一些必备的环境、配置SSH、声明开放一些端口、创建一些Hadoop的HDFS需要用到的目录，当然Spark和Scala的安装是第二个大作业的要求，我会在下一篇博文分享\n 利用此Dockerfile去build一个image：（不要忽略后面的**“.”**）\n1  docker build -t=\u0026#34;hadoop-mutinode-cluster\u0026#34; .   2 - 配置Docker桥接网络  因为服务器集群相互之间需要连通，所以必须进行网络的配置。\nDocker网络bridge桥接模式，是创建和运行容器时默认模式。这种模式会为每个容器分配一个独立的网卡，桥接到默认或指定的bridge上，同一个Bridge下的容器下可以互相通信的。我们也可以创建自定义bridge以满足个性化的网络需求。\n  创建Docker桥接网络  1  docker network create --driver bridge hadoop-br   以上命令创建了一个名为hadoop-br的bridge类型的网络\n 创建三个Container，也就是三个服务器，并指定网络和端口映射关系  1 2 3 4 5 6  # master节点创建命令如下： docker run -itd --network hadoop-br --name hadoop_master --hostname master --ip 172.18.0.2 --add-host slave1:172.18.0.3 --add-host slave2:172.18.0.4 -p 8088:8088 -p 8080:8080 -p 50090:50090 -p 9864:9864 -p 19888:19888 -p 50070:50070 calvinhaynes412/hadoop-mutinodes-cluster:v1.2.0 # slave1 docker run -itd --network hadoop-br --name hadoop_slave1 --hostname slave1 --ip 172.18.0.3 --add-host master:172.18.0.2 --add-host slave2:172.18.0.4 calvinhaynes412/hadoop-mutinodes-cluster:v1.2.0 # slave2 docker run -itd --network hadoop-br --name hadoop_slave2 --hostname slave2 --ip 172.18.0.4 --add-host master:172.18.0.2 --add-host slave1:172.18.0.3 calvinhaynes412/hadoop-mutinodes-cluster:v1.2.0    查看网络情况  1  docker network inspect hadoop-br   执行上述命令会得到类似下面的结果：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  [ { \u0026#34;Name\u0026#34;: \u0026#34;hadoop-br\u0026#34;, \u0026#34;Id\u0026#34;: \u0026#34;273d82ad790f475ef14a78bd5f203d3e441f446683a89e01da5b8240aae731a9\u0026#34;, \u0026#34;Created\u0026#34;: \u0026#34;2021-11-05T07:04:49.300557Z\u0026#34;, \u0026#34;Scope\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;Driver\u0026#34;: \u0026#34;bridge\u0026#34;, \u0026#34;EnableIPv6\u0026#34;: false, \u0026#34;IPAM\u0026#34;: { \u0026#34;Driver\u0026#34;: \u0026#34;default\u0026#34;, \u0026#34;Options\u0026#34;: {}, \u0026#34;Config\u0026#34;: [ { \u0026#34;Subnet\u0026#34;: \u0026#34;172.18.0.0/16\u0026#34;, \u0026#34;Gateway\u0026#34;: \u0026#34;172.18.0.1\u0026#34; } ] }, \u0026#34;Internal\u0026#34;: false, \u0026#34;Attachable\u0026#34;: false, \u0026#34;Ingress\u0026#34;: false, \u0026#34;ConfigFrom\u0026#34;: { \u0026#34;Network\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;ConfigOnly\u0026#34;: false, \u0026#34;Containers\u0026#34;: { \u0026#34;1440ea1055bf14ded8c756bea2ad3f185b00e5663e76b1cf382dd08574be4965\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;hadoop_master\u0026#34;, \u0026#34;EndpointID\u0026#34;: \u0026#34;f193c3bc481b9e447fcffefa50b10519ee6488a34862b51a1f77be52b1d2c922\u0026#34;, \u0026#34;MacAddress\u0026#34;: \u0026#34;02:42:ac:12:00:02\u0026#34;, \u0026#34;IPv4Address\u0026#34;: \u0026#34;172.18.0.2/16\u0026#34;, \u0026#34;IPv6Address\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;627843643b974c89063fdd8659c6f2f3b00c1e5ad232b56a3a6513d50d30ce06\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;hadoop_slave2\u0026#34;, \u0026#34;EndpointID\u0026#34;: \u0026#34;1366b734f7579ae61bae3f41ba53a1f2433bd8df9edc115364dc83e7926b0461\u0026#34;, \u0026#34;MacAddress\u0026#34;: \u0026#34;02:42:ac:12:00:04\u0026#34;, \u0026#34;IPv4Address\u0026#34;: \u0026#34;172.18.0.4/16\u0026#34;, \u0026#34;IPv6Address\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;62a874539d08a4074374cf74f75832cb2c2245a7c95e809f36cbf1250e8a49ac\u0026#34;: { \u0026#34;Name\u0026#34;: \u0026#34;hadoop_slave1\u0026#34;, \u0026#34;EndpointID\u0026#34;: \u0026#34;324e045b4bc61b44967c246fe7ee363582f5cc7c3b78c1327270e3f504ce6ab6\u0026#34;, \u0026#34;MacAddress\u0026#34;: \u0026#34;02:42:ac:12:00:03\u0026#34;, \u0026#34;IPv4Address\u0026#34;: \u0026#34;172.18.0.3/16\u0026#34;, \u0026#34;IPv6Address\u0026#34;: \u0026#34;\u0026#34; } }, \u0026#34;Options\u0026#34;: {}, \u0026#34;Labels\u0026#34;: {} } ]   从以上输出不难看出三台机器的ip：\n1 2 3  172.18.0.2 master 172.18.0.3 slave1 172.18.0.4 slave2   可以登录三个Container，尝试互相可不可以ping的通：\n1 2 3 4  # 在每个Container中分别测试能不能ping通另外两台机器，如果ping的通代表网络没问题了 docker exec -it master bash docker exec -it slave1 bash docker exec -it slave2 bash    测试互相SSH免密登录  1 2 3 4 5 6  ping master ping slave1 ping slave2 ssh master ssh slave1 ssh slave2   如果上述均没问题，那么到此为止修改Hadoop配置之前的预备操作就到此结束了\n3 - 配置环境变量 设置一下Hadoop必须用到的环境变量：（将下面这些环境变量配置的键值对写入~/.bashrc）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  #Hadoop Variables export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64 export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export HADOOP_HOME=/usr/local/hadoop export PATH=$PATH:$HADOOP_HOME/bin export PATH=$PATH:$HADOOP_HOME/sbin export HADOOP_MAPPED_HOME=$HADOOP_HOME export HADOOP_COMMON_HOME=$HADOOP_HOME export HADOOP_HDFS_HOME=$HODOOP_HOME export CLASSPATH=$CLASSPATH:/usr/local/hadoop/lib/*:. export YARN_HOME=$HADOOP_HOME export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native export HADOOP_OPTS=\u0026#34;-Djava.library.path=$HADOOP_HOME/lib\u0026#34; export HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH export HDFS_NAMENODE_USER=root export HDFS_DATANODE_USER=root export HDFS_SECONDARYNAMENODE_USER=root export YARN_RESOURCEMANAGER_USER=root export YARN_NODEMANAGER_USER=root #Hadoop Variables   更新bash配置：\n1  source ~/.bashrc   4 - 配置Hadoop配置文件（核心部分） 在hadoop集群中，需要配置的文件主要包括四个，分别是core-site.xml、hdfs-site.xml、mapred-site.xml和yarn-site.xml，这四个文件分别是对不同组件的配置参数：\n具体参数含义和参数值可以看如下的四个官方文档：（不同版本只要修改docs的下一级/中的版本号即可）\n code-site.xml：https://hadoop.apache.org/docs/r3.2.2/hadoop-project-dist/hadoop-common/core-default.xml hdfs-site.xml：https://hadoop.apache.org/docs/r3.2.2/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml mapred-site.xml：https://hadoop.apache.org/docs/r3.2.2/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml yarn-site.xml：https://hadoop.apache.org/docs/r3.2.2/hadoop-yarn/hadoop-yarn-common/yarn-default.xml  我的参数配置如下：\n core-site.xml  1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;configuration\u0026gt; \u0026lt;!--配置namenode的地址--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;fs.defaultFS\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;hdfs://master:9000\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- 指定hadoop运行时产生文件的存储目录 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;hadoop.tmp.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/tmp\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt;    hdfs-site.xml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  \u0026lt;configuration\u0026gt; \u0026lt;!--上传的文件的副本数(数据备份数，缺省值为3)--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- HDFS的webapp允许使用 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.webhdfs.enabled\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;true\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- namenode web应用端口地址 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.http-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;master:50070\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--存放namenode所使用的元数据的路径（文件名、副本的数量、每一个块的Datanode的位置）--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/namenode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--namenode 存放 edits 的路径（edits中存储的是HDFS操作的日志记录）--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/edits\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- SecondaryNameNode的作用是合并fsimage和edits文件。--\u0026gt; \u0026lt;!--但是如果NameNode执行了很多操作的话，就会导致edits文件会很大，那么在下一次启动的过程中， 就会导致NameNode的启动速度很慢，慢到几个小时也不是不可能，所以出现了SecondNameNode。--\u0026gt; \u0026lt;!-- secondary namenode web 监听端口 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.secondary.http-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;master:50090\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- secondary namenode 节点存储 checkpoint 目录--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.checkpoint.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/checkpoints\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- secondary namenode 节点存储 edits 目录--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.checkpoint.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/checkpoints/edits\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--DataNode所使用的元数据保存路径--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/datanode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--DataNode 节点存储 edit 文件--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/edits\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt;    mapred-site.xml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  \u0026lt;configuration\u0026gt; \u0026lt;!--上传的文件的副本数--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.replication\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;2\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- namenode web 监听端口 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.http-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;master:50070\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--namenode 所使用的元数据保存路径设置--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/namenode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--namenode 存放 edits 的路径（edits中存储的是HDFS操作的日志记录）--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/edits\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- SecondaryNameNode的作用是合并fsimage和edits文件。--\u0026gt; \u0026lt;!--但是如果NameNode执行了很多操作的话，就会导致edits文件会很大，那么在下一次启动的过程中， 就会导致NameNode的启动速度很慢，慢到几个小时也不是不可能，所以出现了SecondNameNode。--\u0026gt; \u0026lt;!-- secondary namenode web 监听端口 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.secondary.http-address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;master:50090\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- secondary namenode 节点存储 checkpoint 文件目录--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.checkpoint.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/checkpoints\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- secondary namenode 节点存储 edits 文件目录--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.namenode.checkpoint.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/checkpoints/edits\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--DataNode所使用的元数据保存路径--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.name.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/datanode\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--DataNode 节点存储 edit 文件--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;dfs.datanode.edits.dir\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;file:/usr/local/hadoop/hadoop_data/hdfs/edits\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt;    yarn-site.xml  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  \u0026lt;configuration\u0026gt; \u0026lt;!-- Site specific YARN configuration properties --\u0026gt; \u0026lt;!-- 指定nodeManager组件在哪个机子上跑 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;mapreduce_shuffle\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;org.apache.hadoop.mapred.shuffleHandler\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!-- 指定resourcemanager组件在哪个机子上跑 --\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.hostname\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;master\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;!--resourcemanager web地址--\u0026gt; \u0026lt;property\u0026gt; \u0026lt;name\u0026gt;yarn.resourcemanager.webapp.address\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;master:8088\u0026lt;/value\u0026gt; \u0026lt;/property\u0026gt; \u0026lt;/configuration\u0026gt;    workers  master slave1 slave2 5 - 将master中的Hadoop配置文件复制到两个slave中 在master的container中命令行敲入以下命令实现将Hadoop配置文件复制到两个slave中：\n1 2  scp -r /usr/local/hadoop/etc/hadoop root@slave2:/usr/local/hadoop/etc scp -r /usr/local/hadoop/etc/hadoop root@slave1:/usr/local/hadoop/etc   6 - 启动所有服务\u0026amp;访问相应的Web服务  格式化NameNode  1  bin/hdfs namenode -format   启动HDFS  1  sbin/start-all.sh   JPS命令查看各节点HDFS运行情况  1  jps   1 2 3 4 5 6  20528 NodeManager 20368 ResourceManager 20065 SecondaryNameNode 19636 NameNode 19791 DataNode 27423 Jps   通过浏览器访问HDFS对外提供的web服务端口   首先要查看端口映射关系，因为创建容器的时候-P将容器开放的端口随机映射到宿主机的一个随机空闲端口上  1  docker container ls     然后就可以根据其中的端口映射关系访问对应的webapp服务（大部分在配置文件中都能找到相应的设置）：\n namenode information的webapp：master(ip):50070 ====\u0026gt; http://localhost:50070   secondnamenode information 的 webapp：master(ip):50090 ====\u0026gt; http://localhost:50090/   datanode information 的 webapp：workers(ip):9864 ====\u0026gt; http://localhost:9864/   YARN的Webapp：resourcemanager url: master(ip):8088 ====\u0026gt; http://localhost:8088/   启动JobHistoryService：bin/mapred --daemon start historyserver \u0026mdash;-\u0026gt; JobHistory url: master(ip):19888 ====\u0026gt; http://localhost:19888/    7 - 简单测试一些基本的HDFS操作  新建一个文件夹  1  bin/hdfs dfs -mkdir /testHDFS    上传一个文件（为了方便我上传的就是hadoop的README文件）  1  bin/hdfs dfs -put /usr/local/hadoop/README.txt /testHDFS    Webapp查看新建的文件夹和文件  8 - 对Hadoop的初步学习 （一）什么是Hadoop？  The Apache Hadoop software library is a framework that allows for the distributed processing of large data sets across clusters of computers using simple programming models. It is designed to scale up from single servers to thousands of machines, each offering local computation and storage. Rather than rely on hardware to deliver high-availability, the library itself is designed to detect and handle failures at the application layer, so delivering a highly-available service on top of a cluster of computers, each of which may be prone to failures.\n 根据上述官网的说明可以看出Hadoop就是一个分布式处理大数据集的一个框架，他把单服务器存储、处理数据扩展到了多台服务器集群分布式存储、计算数据，减轻了单台服务器的负载，并且提高了性能和稳定性（多台服务器集群互相备份也方便有服务器宕机的时候可以顶上去），并且提供了管理多台服务器集群的手段。\n（二）为什么出现了Hadoop？ 其实不难思考，现代世界最重要的就是数据，面对海量的数据，老旧的单机存储和处理数据的手段已经不适用海量的甚至是无关联的数据集，分布式存储计算已经成为解决这些问题的核心手段，其实仔细思考，现在技术圈比较火的几个名词：微服务，云原生，NoSQL，大数据，分布式，云计算，人工智能，归根结底这些技术都离不开海量数据的存储，计算，分析等等，举例来说，Google搜索引擎每天要存储海量的网页，并且执行自己的分析算法，随着数据量越来越大，就要采用分布式的办法，所以他们先后提出了GFS、NGFS、BigTable，而Hadoop也一步步推出自己相关的解决方案，如下图：\n（三）初探Hadoop Hadoop的核心架构，就是HDFS和MapReduce。其中HDFS（Hadoop File System）是为了存储海量的数据来存在的，而MapReduce是为海量数据提供了一个计算框架\n1 - HDFS HDFS主要有三个要素：NameNode、DataNode、Client\n NameNode：Master节点，相当于所有DataNode的管理者，Namenode会将文件系统的一系列元数据（元数据这个词非常常见，它的意思就是表示数据的数据）存在其中，包括每个文件Block在DataNode中的信息。 DataNode：是Slave节点（从节点），是文件存储的基本单元，它将Block存储在本地文件系统中，保存了Block的Meta-data，同时周期性地将所有存在的Block信息发送给NameNode。 **Client：**切分文件；访问HDFS；与NameNode交互，获得文件位置信息；与DataNode交互，读取和写入数据。  Block（块）：Block是HDFS中的基本读写单元；HDFS中的文件都是被切割为block（块）进行存储的；这些块被复制到多个DataNode中；块的大小（通常为64MB）和复制的块数量在创建文件时由Client决定。  2 - MapReduce MapReduce就是总结了大数据算法的通用特点之后造的轮子，关于MapReduce的介绍和讲解网上的例子都大差不差，我推荐下面这几个介绍和讲解\n 官网：https://hadoop.apache.org/docs/r1.2.1/mapred_tutorial.html Google的MapReduce论文讲解：https://zhuanlan.zhihu.com/p/34849261 五分钟搞懂Hadoop：https://zhuanlan.zhihu.com/p/20176725  结语 感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n参考资料 https://zhuanlan.zhihu.com/p/25472769\nhttps://www.cnblogs.com/upupfeng/p/13616125.html\nhttps://hadoop.apache.org/docs/r3.2.2/\nhttps://zhuanlan.zhihu.com/p/54994736\n","description":"利用Docker搭建一个多节点服务器集群","id":4,"section":"posts","tags":["Docker","Hadoop"],"title":"利用Docker搭建一个Hadoop Mutinode Cluster","uri":"https://blog.calvinhaynes.top/posts/%E5%88%A9%E7%94%A8docker%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAhadoop-muti-node-cluster/"},{"content":"前言 自从学习了Docker，我就无处施展自己的才华了，突然想起之前学习MIT6.S081课程的时候环境搭建完后就一直在吃灰，再加上我突然联想到之前搭建的code-server（点这里），所以我突然有了个大胆的想法，搭建一个Docker的MIT6.S081实验环境，并且采用code-server的形式，达成一个开箱即用的效果，甚至可以挂到云服务器（阿里云学生机）上，实现随时随地使用code-server进行实验，有灵感的时候随时掏出IPAD或者手机就可以实验搞起，实在是太香了，而且以后其他CSLab也可以采用相似的方案，那么下面我们就开始吧。\n没有了解过Docker的小伙伴我给出以下几个链接供大家学习和参考\n Docker从入门到实践文档（非常详尽） 油管视频列表（科学上网） Dockerfile参考文档  Dockerfie 官方文档：https://docs.docker.com/engine/reference/builder/ Dockerfile 最佳实践文档：https://docs.docker.com/develop/develop-images/dockerfile_best-practices/ Docker 官方镜像 Dockerfile：https://github.com/docker-library/docs    如何按需正确食用本文\n 仅仅想直接使用我搭建好的环境的童鞋请直接移步到使用篇，利用Docker可以直接pull我的Regisry（环境比较大，国外服务器很慢，后面我会说其他解决方案），然后直接进行MIT6.S081的实验 想学习Docker搭建环境的童鞋可以慢慢看环境搭建步骤  效果演示 环境搭建步骤 通过不断的尝试，我觉得这种方案可以作为做国外CSLab的通用方案，只要写好相应的Dockerfile就可以了，code-server和其他一些常见的比如镜像源的设置、使用的linux发行版等等是通用的，这些保留，然后剩下的部分就专注于在Dockerfile中搭建相应国外CSLab的环境就可以了，基于此思路，我们进行下面的搭建步骤。（下面一步步按照我的思路来走，之后你想搭建自己的其他实验环境，就按照这样思路向下进行就可以了）\n1 - 首先准备好各种搭建环境的工具   首先我是Windows系统，所以下载了Docker Desktop\n  简单配一些国内的Docker Registry镜像源（点开设置中Docker Engine就行了）\n  1 2 3 4 5 6 7 8 9 10 11 12 13 14  { \u0026#34;registry-mirrors\u0026#34;: [ \u0026#34;https://registry.docker-cn.com\u0026#34;, \u0026#34;http://hub-mirror.c.163.com\u0026#34;, \u0026#34;https://docker.mirrors.ustc.edu.cn\u0026#34;, \u0026#34;https://xzahxrmt.mirror.aliyuncs.com\u0026#34; ], \u0026#34;insecure-registries\u0026#34;: [], \u0026#34;debug\u0026#34;: false, \u0026#34;experimental\u0026#34;: false, \u0026#34;features\u0026#34;: { \u0026#34;buildkit\u0026#34;: true } }     windows原生的命令行终端太拉了，所以下载他们新出的Windows Terminal，样子好看了不少，还能开多个Tab标签，还能定制化样式，确实好用（附上youtube上的美化教程）\n  2 - 然后进行MIT6.S081环境搭建的调研和实践  首先肯定是官网的环境搭建说明书是第一位要看的：https://pdos.csail.mit.edu/6.828/2020/tools.html 结果发现搭建问题很多，我使用的是ubuntu20.04LTS，官方教程对应ubuntu的部分搭建起来一大堆问题。 然后我就开始互联网冲浪寻找其他人分享的环境搭建的教程，自己先简单开个Docker测试每个教程的环境搭建是否有效，最终结合多家教程和自己的思考，拿到了正确的环境配置方式，并写了对应的Dockerfile，具体内容如下（没一步操作我都写好注释了，可以先看完上面的Docker从入门到实践中的Dockerfile部分然后再看这里进行理解）：  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64  FROMubuntu:20.04ARG arch_name=amd64 # 前几步因为针对本实验依赖不全的原因问题百出，所以放弃了，还是ubuntu20.04官方镜像源对于MIT6.S081所需依赖最全面# 1.备份源列表# RUN cp /etc/apt/sources.list /etc/apt/sources.backup.list# 2.把本目录下的sources.list中的镜像源添加到Docker中，下载速度起飞# COPY sources.list /etc/apt/sources.list# 3.更新源# RUN apt-get update # 创建一个mit6s081的用户和其home目录RUN useradd -m mit6s081 \u0026amp;\u0026amp; \\  echo \u0026#34;root ALL=(ALL) NOPASSWD: ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers \u0026amp;\u0026amp; \\  echo \u0026#34;mit6s081 ALL=(ALL) NOPASSWD: ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers  # 设置一些环境变量ENV TZ=Asia/Shanghai \\  LANG=en_US.utf8 \\  LANGUAGE=en_US.UTF-8 \\  LC_ALL=en_US.UTF-8 \\  DEBIAN_FRONTEND=noninteractive# MIT6.S081 Lab所用依赖# 1.安装RISC-V交叉编译工具和一些其他的常用工具RUN apt-get update \u0026amp;\u0026amp; \\  apt-get install -y sudo locales git wget vim build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu libpixman-1-dev gcc-riscv64-unknown-elf libglib2.0-dev pkg-config# 2.安装QEMU和配置QEMURUN wget https://download.qemu.org/qemu-5.1.0.tar.xz RUN tar xf qemu-5.1.0.tar.xz RUN cd qemu-5.1.0 \u0026amp;\u0026amp; \\  ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=riscv64-softmmu \u0026amp;\u0026amp; \\  make \u0026amp;\u0026amp; \\  make install# 下载code-server并安装RUN apt-get install -y aria2 \u0026amp;\u0026amp; \\  aria2c https://github.com.cnpmjs.org/cdr/code-server/releases/download/v3.12.0/code-server_3.12.0_${arch_name}.deb \u0026amp;\u0026amp; \\  dpkg -i code-server_3.12.0_${arch_name}.deb# 切换用户mit6s081USERmit6s081# 下载一些code-server的插件RUN mkdir /home/mit6s081/extensions# 1.Markdown ExtensionRUN code-server --install-extension yzhang.markdown-all-in-one# 2.Cpp ExtensionADD cpptools-linux.vsix /home/mit6s081/extensionsRUN code-server --install-extension /home/mit6s081/extensions/cpptools-linux.vsix# 3.Material Theme ExtensionRUN code-server --install-extension equinusocio.vsc-material-theme # 切换回Root用户，拥有最高权限USERrootRUN apt-get update# 暴露8848端口，用于code-server本地运行的端口EXPOSE8848# 设置code-server密码ENV PASSWORD=mit6s081 USERmit6s081CMD [ \u0026#34;code-server\u0026#34;, \u0026#34;--bind-addr\u0026#34;, \u0026#34;0.0.0.0:8848\u0026#34;, \u0026#34;--auth\u0026#34;, \u0026#34;password\u0026#34; ]   写好Dockerfile之后，直接docker build -t \u0026lt;镜像名\u0026gt;:\u0026lt;版本号/标签\u0026gt; .就构建好镜像了，注意后面那个.可不能省略，具体原因看这里   之所以创建了两个用户也是为了大家在使用环境的时候专注于使用当前环境，而不给大家root用户修改环境的权限，所以如果你遇到了使用apt-get update等指令时给出denied的报错正是说明了这点。\n当然如果你想自己增加一些功能，也可以本地使用命令docker exec -u root -it \u0026lt;Container名字\u0026gt; /bin/bash进入你创建的container中，然后你可以自定义这个Container的环境，然后commit到镜像上，如果功能不错提高实验幸福感的话，欢迎知乎私信或者Github上提Issue。\n 3 - 一些环境搭建中遇到的坑  被选择时区的环节卡住  1 2 3 4 5 6 7 8  Please select the geographic area in which you live. Subsequent configuration questions will narrow this down by presenting a list of cities, representing the time zones in which they are located. 1. Africa 4. Australia 7. Atlantic 10. Pacific 13. Etc 2. America 5. Arctic 8. Europe 11. SystemV 3. Antarctica 6. Asia 9. Indian 12. US Geographic area:   可以通过配置环境变量，来跳过这个步骤\n1  ENV DEBIAN_FRONTEND=noninteractive   RUN的使用不当，导致环境搭建过程中一直出错  主要是最初不理解Dockerfile，顺着指令说明书就开始莽了，后来才发现RUN指令每次执行会在当前image之上的新的一层中执行后面的命令并提交结果，这样就导致前后有关联的指令执行总是报错（原因就是他们本就应该是一条流程下来的，现在拆分成不同层了当然会出错），所以我才学会用 \u0026amp;\u0026amp;和\\（反斜杠）将单个 RUN 指令延续到下一行。\n比如下面这几行例子：\n1 2 3 4  RUN cd qemu-5.1.0 \u0026amp;\u0026amp; \\  ./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=riscv64-softmmu \u0026amp;\u0026amp; \\  make \u0026amp;\u0026amp; \\  make install  如果不用\u0026amp;\u0026amp;和\\关联各行的话，比如第一行cd到那个qemu-5.1.0目录了，下一行**./configure执行的时候在新的一层了，就一定会报错不存在./configure**（因为这个configure配置qemu的可执行文件就在qemu-5.1.0目录下）\n使用篇 1 - 方式一：DockerHub 首先pull下来我的Docker镜像：  由于DockerHub用的是国外的服务器，所以很慢很慢，但是就一行命令，比较容易 镜像地址在这里：https://hub.docker.com/repository/docker/calvinhaynes412/mit6.s081/tags?page=1\u0026amp;ordering=last_updated 最新版本的pull镜像的命令如下：  1  docker pull calvinhaynes412/mit6.s081:v1.3.1   然后去Github上Fork我上传的MIT6.S081原版纯净的实验环境  这样你就能自己git管理自己的实验代码了，其实我就是把官方的git仓库自己上传了，主要是由于MIT pdos官方没有放出来这个2020实验的源代码不方便Fork之后直接自己使用，所以我转载了官方的2020实验源代码，是方便大家直接Fork下来自己做实验，并且我加了一个MIT的开源许可协议。\n  项目地址：https://github.com/CalvinHaynes/MIT6.S081-2020-labs（） Fork完之后clone到你本地的一个文件夹里面（重点，之后创建Docker的Container的时候需要使用）   想在这里顺便介绍一下我自己学习此Lab整理笔记和实验解决方案的一个仓库，供大家学习参考，如果有帮助的话希望给我点一个STAR\n  GitHub项目地址：https://github.com/CalvinHaynes/MIT6.S081-2020Fall\n  码云版本：https://gitee.com/CalvinHaynes/MIT6.S081-2020Fall\n  在项目中涉及了每个实验（如果我能坚持做完的话，我相信我可以）的实验解决代码、实验笔记、课堂笔记、课堂小练习、一些学习操作系统优质的资料等等。\n 创建一个Container  点击RUN   配置Container   这里的Volumes配置你可以理解为将Host Path中的文件目录挂载在此Container中，挂载在Container的具体位置就是这里配置的Container Path（这里就直接配置成我图中写的路径，因为我已经在.gdbinit设置过了，如果你修改为其他位置的话，就修改/home/mit6s081/.gdbinit中的内容为add-auto-load-safe-path \u0026lt;你设置的Container Path\u0026gt;/.gdbinit）\nVolumes简单理解就是主机目录挂载到容器上\n 2 - 方式二：阿里云镜像仓库  由于DockerHub服务器在国外，实在难以忍受它的速度，有一天偶然发现，阿里云竟然有容器镜像服务，NICE！冲！！！ 这个速度简直飞快，实测大约不到一分钟就pull下来了 先在Docker Engine中加入阿里云的Docker镜像，前面的Docker Engine设置中的\u0026quot;https://xzahxrmt.mirror.aliyuncs.com\u0026quot;就是阿里云的镜像加速器 运行指令：  1  docker pull registry.cn-beijing.aliyuncs.com/calvin_haynes/mit6.s081:release-v1.0.0    之后创建一个Container的方法和上述一致  3 - 开始做实验吧！ 如果你也是配置的8848端口，那么直接点击http://localhost:8848/(密码是==mit6s081==哦)，就可以进入在线的Vscode进行愉快（狗头保命）的MIT6.S081实验了！！\n完整的命令行使用教程(服务器端和本地Linux系统用户看这里)  安装docker 配置阿里云镜像加速器（以下命令针对ubuntu）  1 2 3 4 5 6 7 8  sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json \u0026lt;\u0026lt;-\u0026#39;EOF\u0026#39; { \u0026#34;registry-mirrors\u0026#34;: [\u0026#34;https://xzahxrmt.mirror.aliyuncs.com\u0026#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker   pull镜像（最新版本，之后版本更新的通知我会在评论区说明，记得偶尔来看看）  1  docker pull registry.cn-beijing.aliyuncs.com/calvin_haynes/mit6.s081:release-v1.3.1   clone实验源代码(我还会慢慢在这个项目中增加我学习过程中的笔记和实验代码等资料,如果对你有帮助的话,希望帮我点个STAR哦)  1  git clone https://github.com/CalvinHaynes/MIT6.S081-2020-labs \u0026lt;放实验文件的任何你想要放的位置\u0026gt;   创建Container（-u 0:0是为了保证Container中的root用户和本机的root用户权限一致,不过其实不建议用root权限，所以如果本机和Container的其他非root用户有相同的uid的话最好 -u uid:uid）  1  docker run -p 8848:8848 --name=mit6.s081 -u 0:0 -v \u0026#34;\u0026lt;刚才clone的项目的位置\u0026gt;:\u0026lt;设置一个Container中的位置映射到前面的clone的项目的位置\u0026gt;\u0026#34; registry.cn-beijing.aliyuncs.com/calvin_haynes/mit6.s081:release-v1.3.1   本地用户浏览器访问 http://localhost:8848/ 密码： mit6s081. 服务器端用户浏览器访问http://\u0026lt;服务器公网ip\u0026gt;:8848/ 密码： mit6s081.  结语 这虽然只是一个MIT6.S081的Docker环境搭建教程，但是同时也是以后搭建其他实验环境的思路，如果学会了这一套思路和手段，那么以后后搭建任何环境都是唾手可得的！！\n关于MIT6.S081的实验解析和课程笔记未来都会逐渐在我的项目中更新，欢迎大家关注这个项目，关于此Docker，还有很多可以优化的地方，我会同步更新Dockerfile，Docker阿里云镜像/官方镜像，敬请期待。\n感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n","description":"一个玩转国外CSLab的通用环境搭建方案（附我的搭建好的MIT6.S081环境）","id":5,"section":"posts","tags":["操作系统","Docker","Vscode","CSLab"],"title":"一个玩转国外CSLab的通用环境搭建方案（附我的搭建好的MIT6.S081环境）","uri":"https://blog.calvinhaynes.top/posts/%E4%B8%80%E4%B8%AA%E7%8E%A9%E8%BD%AC%E5%9B%BD%E5%A4%96cslab%E7%9A%84%E9%80%9A%E7%94%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%96%B9%E6%A1%88%E9%99%84%E6%88%91%E7%9A%84%E6%90%AD%E5%BB%BA%E5%A5%BD%E7%9A%84mit6.s081%E7%8E%AF%E5%A2%83/"},{"content":"前言 这是一个我正在使用的软件清单系列文章，涵盖了时间管理，高效率开发工具，系统优化软件，写文档工具流等。\n之所以写这篇文章，很大一部分原因是想和大家分享一下我的效率软件清单，另一个原因是也为自己下次重装系统做一个保障，免得忘记什么。\n下面我们就正式开始介绍吧，目录我会分好类的，每个超链接都指向一些我认为的非常好的资源以及各个软件的下载地址等等的信息，大家按照自己想要看的点进去就可以了。\n 这可能是我的一个专栏系列（分享我使用的所有的有趣和高效率的软件或插件，网页等）\n windows 系统优化工具 1 - 分区助手  想必大家都被分区弄得很头痛吧，在装系统时 C 盘分的太小了，现在 C 盘红了，还不好清理，那么这款分区助手就能完美解决你的问题 图形化界面相当友好，电脑小白也能操作 附上分区助手官网的使用手册：https://www.disktool.cn/jiaocheng/index.html  2 - CCleaner：电脑管家  虽然网上骂声一片，说 CCleaner 是流氓软件，但是我依旧爱他，爱他简约而不简单的功能 CCleaner 的功能列表如下：  垃圾清理 驱动更新 注册表清理（超级强的功能） 卸载程序 管理 PC 启动项 重复文件查找 系统备份和还原 Cookie 和浏览器插件管理 等等   软件界面如下：  结语 好的工具只是方便我们管理自己的 PC 或者便于开发而已，千万不能陷入工具的陷阱，人和动物最大的区别就是学会了制造工具，但是过分依赖于工具也会毁了一个人，在使用工具时要保持一个态度就是：对于自己十分明确的功能勇敢的使用和尝试，对于自己不明确的功能先去学习原理，再结合搜索引擎上的经验慢慢投入使用。\n最后希望大家按需取用上述的软件，玩的愉快！！\n 未来我还会持续更新，在清单中添加更加有趣的软件，敬请期待！！！  ","description":"windows系统优化工具清单","id":6,"section":"posts","tags":["软件清单"],"title":"属于每一个程序猿和学生的一份高效率软件清单--第三弹:windows系统优化工具（持续更新）","uri":"https://blog.calvinhaynes.top/posts/%E5%B1%9E%E4%BA%8E%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%92%8C%E5%AD%A6%E7%94%9F%E7%9A%84%E4%B8%80%E4%BB%BD%E9%AB%98%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95-%E7%AC%AC%E4%B8%89%E5%BC%B9-windows%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%E5%B7%A5%E5%85%B7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"content":"前言 这是一个我正在使用的软件清单系列文章，涵盖了时间管理，高效率开发工具，系统优化软件，写文档工具流等。\n之所以写这篇文章，很大一部分原因是想和大家分享一下我的效率软件清单，另一个原因是也为自己下次重装系统做一个保障，免得忘记什么。\n下面我们就正式开始介绍吧，目录我会分好类的，每个超链接都指向一些我认为的非常好的资源以及各个软件的下载地址等等的信息，大家按照自己想要看的点进去就可以了。\n 这可能是我的一个专栏系列（分享我使用的所有的有趣和高效率的软件或插件，网页等）\n 程序猿写文档必备工具箱 1 - Snipaste：截图软件  这绝对是综合看来我用过所有 windows 下截图软件最棒的了，所有的截图功能都有，像全屏截图、窗口截图，自定义像素截图等等基本功能都有。 最牛的功能是它的贴图功能，不知道大家有没有遇到过这样一种情况：假如上网课的时候，老师讲的下部分是关于上一张 PPT 的，但是你手中还没有 PPT，或者你想对比一下之前的 PPT 来学习，那么这个时候贴图就发挥其作用了，示例如下：（你还可以发挥你的其他想象利用这个功能）   可以设置的选项如下：（==你可以在控制中自定义各个功能的快捷键，设置成你熟悉的==）  2 - GifCam：一款录制 GIF 的软件  看了上面的 GIF 图，是不是也在奇怪我这些图是怎么自己做的，那么这就向您介绍这款软件：GIFCam，这是一款可以录制 GIF 动图的软件，短小精悍，仅仅只有录制 GIF 的功能，你可以设置输出文件的 FPS，自定义录制的窗口大小或者全屏等等。  3 - PicX 图床：一个开源作者写的开源图床  其实这个不能算是软件，但由于 chrome 浏览器可以直接把这个网站直接打包成一个应用在本地，也算个软件把。 这个开源图床目前还在优化和更新中，作者也十分努力的在开发和维护这个项目 这个图床就是利用你自己建的 Github 库存储图片，然后提供图片的管理和 Markdown+CDN 格式的自动转换，上传图片之后直接复制就可以放在你的 md 文档中了，着实挺方便，而且界面 UI 和交互也都很不错。 使用情况如下：（感谢作者：https://xpoet.cn/）  结语 好的工具只是方便我们管理自己的 PC 或者便于开发而已，千万不能陷入工具的陷阱，人和动物最大的区别就是学会了制造工具，但是过分依赖于工具也会毁了一个人，在使用工具时要保持一个态度就是：对于自己十分明确的功能勇敢的使用和尝试，对于自己不明确的功能先去学习原理，再结合搜索引擎上的经验慢慢投入使用。\n最后希望大家按需取用上述的软件，玩的愉快！！\n 未来我还会持续更新，在清单中添加更加有趣的软件，敬请期待！！！  ","description":"程序猿写文档必备工具箱清单","id":7,"section":"posts","tags":["软件清单"],"title":"属于每一个程序猿和学生的一份高效率软件清单--第二弹:程序猿写文档必备工具箱（持续更新）","uri":"https://blog.calvinhaynes.top/posts/%E5%B1%9E%E4%BA%8E%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%92%8C%E5%AD%A6%E7%94%9F%E7%9A%84%E4%B8%80%E4%BB%BD%E9%AB%98%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95-%E7%AC%AC%E4%BA%8C%E5%BC%B9-%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%86%99%E6%96%87%E6%A1%A3%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"content":"前言  这是一个我正在使用的软件清单系列的专栏文章，涵盖了时间管理，高效率开发工具，系统优化软件，写文档工具流等，对于每个工具我仅会描述其最重要的功能，其余的学习资料或软件下载链接我会以超链接的形式放在文章中，供大家查看和学习。\n 之所以写这篇文章，很大一部分原因是想和大家分享一下我的效率软件清单，另一个原因是也为自己下次重装系统做一个保障，免得忘记什么。\n下面我们就正式开始介绍吧！！！\n程序猿高效开发工具 1 - JetBrains Toolbox：JetBrains 家的工具箱   自从用了 JetBrains 家的 IDEA，就爱上了他们家 IDE 的风格，目前也是离不开了，写各种语言程序的时候都是优先找他们家的 IDE，优秀的插件和特别 Geek 的界面确实让人眼前一亮，JetBrains 推出的这款 JetBrains Toolbox 集成了 JetBrains 家所有工具的下载，更新，项目管理，对于喜欢 JetBrains 家 IDE 的朋友们确实方便了许多。\n 下面这个是这个软件的小窗口界面：\n2 - Vscode：轻量代码编辑器 虽然 JetBrains 家的 IDE 十分好用，但是对于简单的代码编辑工作，调试小段代码，确实显得就不太方便了，这时候一个优秀的代码编辑器就能胜任这些快速编辑代码的工作。\n市面上主流的有 Sublime Text，Vscode，NotePad ++，Atom，Vim 等等，但是 Vscode 现在丰富的插件以及优秀的远程开发的能力确实突出。\n所以跌跌撞撞最终还是选择了拜倒在 Vscode 的石榴裙下。\n有关于 Vscode，我还写了一篇利用 code-server 和阿里云搭建在线版 Vscode 的文章，可以让你在网页，手机，Ipad 上随时随地运行 Vscode。\nhttps://zhuanlan.zhihu.com/p/379632978\n3 - uTools：桌面快速工具箱   uTools 是一个极简、插件化的现代桌面软件，通过自由选配丰富的插件，打造得心应手的工具集合。 通过快捷键（默认 alt + space ）就可以快速呼出这个搜索框。你可以往输入框内粘贴文本、图片、截图、文件、文件夹等等，能够处理此内容的插件也早已准备就绪，统一的设计风格和操作方式，助你高效的得到结果。 一旦你熟悉它后，能够为你节约大量时间，即用即走、不中断、无干扰，让你可以更加专注地改变世界。   这是一家创业公司做的一款软件，这种一切皆插件，呼出即使用的感觉是前所未有的，大大提高了PC使用效率，减少了无意义的鼠标点击，让我们工作的时候可以更加专注。\n在插件中心中可以下载很多高效的插件，比如思维导图，Markdown 文档，快速打开最近的项目，翻译，基于 Everything 的搜索，以及最基本的功能\u0026mdash;快速打开 PC 上的任何一款软件\n4 - Termius：SSH 终端  这是一个我目前用过的所有的 SSH 终端中最好的一个，它不仅美观，而且跨平台，对于移动端的适配手势简直不要太香，而且申请 Github 学生包还可以免费享用更多的高级特权（Github 学生包所有的特权 ） 我之前写过一篇文章就有介绍过这个软件，大家有兴趣也可以去看看 以下是软件界面的图片（可以自定义终端的字体和颜色风格等）（全平台通用和同步，包含 Android，IOS，Windows，MacOS，Linux）   并且支持 SFTP 功能，NICE！！！  ![GIF 2021-6-10 16-34-08](https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/GIF 2021-6-10 16-34-08.1n12dp0c16ow.gif)\n5 - Windows Terminal：windows命令行的崛起  自从使用了Linux系统之后，确实大爱命令行，优雅高效完全是GUI无法比拟的，但在尝试了windows的CMD之后觉得windows咋能把这玩意搞这么难用，后来出现了PowerShell确实看到了微软的努力，但是依旧没有一种很顺畅的感觉，bug不断，直到Windows Terminal的出现，让我爱上了Windows命令行，尤其是现在有了WSL和Docker，使得在Windows下运行Linux也不是问题了，使用Windows Terminal使得这些服务也变得很爽！\n  我的Windows Terminal配置后的效果如下：\n 具体配置文件之后再说  6 - Github Desktop：迄今为止最好的 Git GUI 工具  你是否为写 Git 命令烦恼，找了很多图形化处理工具，但是都不是很人性化，而且界面丑而差，那么 Github Desktop 这就来了，包您满意诶嘿嘿。 Github Desktop 是 Github 官方开发的 GIthub 图形化软件，就冲这一点，你应该就能知道这个软件应该很好用了吧，毕竟是官方的，起码针对 Github 的支持是杠杠滴 具体使用情况我就不细说了，这里附上使用指南：https://docs.github.com/cn/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop ==简单的界面演示如下：==  7 - Postman：模拟HTTP/HTTPS请求工具  Postman是谷歌开发的一款网页调试和接口测试工具，能够发送任何类型的http请求，支持GET/PUT/POST/DELETE等方法。Postman非常简单易用，可以直接填写URL，header，body等就可以发送一个请求，用来测试api接口非常方便。（对于现在各种浏览器都自动把http请求转换为HTTPS请求的情况，用于测试HTTP请求也是个很不错的选择） 学习postman的教程推荐  postman快速上手视频教程推荐（需要科学上网）：戳这里 官方文档   postman的界面如下：  结语 好的工具只是方便我们管理自己的 PC 或者便于开发而已，千万不能陷入工具的陷阱，人和动物最大的区别就是学会了制造工具，但是过分依赖于工具也会毁了一个人，在使用工具时我认为需要保持的态度应该是：对于工具的功能所应用的领域自己已经基本了解的情况下再去使用工具，这样不仅能在使用工具的同时加深对那个领域的理解，而且还能够去剖析工具可以优化的点，而不是一头扎进完全依赖工具的漩涡中，就是我认为的填鸭式的学习和自主思考式的学习的区别。\n 最后希望大家按需取用上述的软件，玩的愉快！！未来我还会持续更新，在清单中添加更加有趣的软件，敬请期待！！！  感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n","description":"程序猿高效开发工具系列","id":8,"section":"posts","tags":["软件清单"],"title":"属于每一个程序猿和学生的一份高效率软件清单--第一弹:程序猿高效开发工具（持续更新）","uri":"https://blog.calvinhaynes.top/posts/%E5%B1%9E%E4%BA%8E%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F%E7%8C%BF%E5%92%8C%E5%AD%A6%E7%94%9F%E7%9A%84%E4%B8%80%E4%BB%BD%E9%AB%98%E6%95%88%E7%8E%87%E8%BD%AF%E4%BB%B6%E6%B8%85%E5%8D%95-%E7%AC%AC%E4%B8%80%E5%BC%B9-%E7%A8%8B%E5%BA%8F%E7%8C%BF%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"},{"content":"前言 ​\t上课想练练数据结构与算法？或者就是想玩玩儿Vscode？或者有一个自己的服务器，但是觉得没有利用到极致？那么这篇文章将带你搭建一个在线版的Vscode，利用浏览器实现全平台使用Vscode，管你什么手机，Pad，电脑，板砖，咳咳，整就完了！！！\n​\t文章中所有的超链接都是很不错的资源，建议都要仔细看看，为了不让文章那么太长，所以我用了不少超链接。\n 本文搭建环境：开源项目code-server，一台服务器（至少一核2G才能有比较流畅的效果）\n 如果本文对你有帮助的话，还望关注，点赞，转发，收藏，谢谢咯。\n（一）运行效果  这个Vscode在线版是运行在我买的阿里云学生机的9999端口的，毕竟9.9一月，对于学生党很友好，我的个人博客也搭在上面的，性能一般，但是也很够用了。\n （二）基础配置 1 - 下载code-server到服务器上  进到服务器的SSH中，这个只要你买了服务器应该都可以用SSH的，服务器还没买的，也不会用服务器的，看以下几篇文章（其实不限制与阿里云的，不是推广阿里云哈，其他云怎么用大家自行选购，因为我用的是阿里云，所以这几篇文章也都是阿里云的一些使用教程）：\n https://zhuanlan.zhihu.com/p/368487727 https://www.zhihu.com/search?type=content\u0026amp;q=%E9%98%BF%E9%87%8C%E4%BA%91%E5%AD%A6%E7%94%9F%E6%9C%BA%E6%95%99%E7%A8%8B（自己挑着看） https://blog.csdn.net/u011002997/article/details/83933365  官网上应该也还有比较完善的使用手册啥的，深入玩一下的话，建议自己多研究研究，上面这几篇文章也是我大体看上去不错的，要想明白究竟怎么用的还是要自己用好搜索引擎。\n wget https://github.com/cdr/code-server/releases/download/v3.10.2/code-server-3.10.2-linux-amd64.tar.gz  这一步下载速度可能会很慢，甚至中途失败，可以考虑挂代理，不会Linux下挂代理的，看我下面的骚操作\n 当然，你最好有一个梯子，这样总归是要更快和更稳定的。\n下面我将演示如何在Windows下下载code-server再传到服务器上：\n  首先我想介绍一下我使用过那么多的SSH最好用的一款软件：Termius\n​\t这个软件是真正的全平台，而且简直是我这种颜值控福利，终端各种皮肤，贼好看，如果你有幸申请到Github学生包的话，还有其他不少福利。\n​\t关于Termius的使用教程\n  在Windows下载code-server的压缩包\n点击这个链接\n再点这个，就开始下载了\n  下载完压缩包之后，找到下载的位置，然后就要介绍Termius的SFTP功能\n​\t选中你的服务器\n  ​\t先找到你本地压缩包的网址，选中你本地的压缩包，直接拖到服务器上就行（哎，真不错，我就是玩儿）\n![GIF 2021-6-10 16-34-08](https://cdn.jsdelivr.net/gh/CalvinHaynes/ImageHub@main/BlogImage/GIF 2021-6-10 16-34-08.1n12dp0c16ow.gif)\n传过去之后现在你可以到你的服务器中ls -a一下，看看它在不在  ​\t那么以上就是下载的全部内容了\n2 - 解压安装试运行（运行部分可以先不弄，下一步的更好用）  解压  tar -xvzf code-server-3.10.2-linux-amd64.tar.gz  可以改个名  mv code-server-3.10.2-linux-amd64 code-server  运行试下（建议先看下参数列表）  PS：得确保你开了9999端口，下面是我的服务器防火墙配置\n 为啥不用8080端口？戳这\n cd code-server export PASSWORD=\u0026#34;你想设置的密码\u0026#34; ./code-server --port 9999 --host 0.0.0.0 --auth password   –port 9999 指定端口，缺省时为 8080 –host 0.0.0.0 允许公网访问，缺省时为 127.0.0.1，只能本地访问 –auth password 指定访问密码，可通过 export 命令设置，参数为 none 时不启用密码    可以看一下参数列表  ./code-server --help  运行后，打开 Chrome 访问“服务器公网IP:端口”，效果图：   服务器公网IP去哪里查？ 戳这\n （三）高级配置 ​\t我们都知道Linux是可以写shell脚本的，那么为了简化以上操作，也为了让其根据我们意愿后台运行或者终止，我们着手写两个脚本，start.sh和shut.sh(脚本是要写在code-server目录的奥)\n脚本执行目标\n  start.sh\n 开启code-server，后台运行该进程 记录当前进程的PID，也专门记录一个日志log文件便于以后查看 将PID存到文件里面  #start.sh export PASSWORD=\u0026#34;412523\u0026#34; nohup ./code-server --port 9999 --host 0.0.0.0 --auth password \u0026gt; test.log 2\u0026gt;\u0026amp;1 \u0026amp; echo $! \u0026gt; save_pid.txt   shut.sh\n 读文件中的PID 杀死进程  #shut.sh kill -9 \u0026#39;cat save_pid.txt\u0026#39;   （四）Ios端/IpadOS端的最佳使用方式  本来配置完以上，我们用任何设备，只要用浏览器就可以使用了，但是Ios端和IpadOS端有一个可以更加沉浸体验的软件，推荐给大家\n  以下是使用方法：  选好点Save就可以了，访问效果就如第一步运行效果的图\n（五）使用流程总结  SSH登入服务器 cd code-server ./start.sh 浏览器直接访问网址/Apple系列产品的serveditor 关了，免得一直占用我的服务器：./shut.sh  （六）参考资料 在Ipad上使用Vscode\n","description":"使用code-server搭建在线运行的Vscode","id":9,"section":"posts","tags":["Vscode"],"title":"上课摸鱼必备 -- Vscode网页版的搭建教程","uri":"https://blog.calvinhaynes.top/posts/%E4%B8%8A%E8%AF%BE%E6%91%B8%E9%B1%BC%E5%BF%85%E5%A4%87--vscode%E7%BD%91%E9%A1%B5%E7%89%88%E7%9A%84%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"content":"前言 经过种种尝试，还是决定选择了Hugo作为了搭建个人博客的框架，Hugo是目前可以搭建个人博客的框架中部署最快的，而且坑也相对很少，不过还是有的，近几天折腾了不少东西，也终于算是初步搭建完了Hugo+Zoo主题的个人博客\n在本文中我会讲解部署的详细过程，也会科普一些部署中的原理，毕竟我也刚刚接触，所以有些说的不对的地方也希望评论区的大佬来勘误，谢谢啦。\n如果遇到部署问题，欢迎在评论区打出你的问题，我和知乎这个优秀社区的所有人都有可能回答你的疑问哦，本文如果对你有帮助的话，还希望多多点赞收藏转发，谢谢啦。\n1 - 使用Hugo创建静态网站实战 1、安装Hugo 博主用的是Windows系统，所以安装过程中我会基于Windows进行讲解，有关其他操作系统的安装方法可以参考官方的文档\nWindows下的Hugo安装我推荐使用chocolatey包管理器进行安装，接触过Linux的朋友们都知道，Linux的各种包管理器，利用命令行就可以实现包的更新，删除等操作，Windows下也有类似的包管理器就是chocolatey了。\n安装过程详解\n  安装chocolatey包管理器：在官网点击 Install Now 即可下载\n  命令行中敲入choco --version，如果显示版本号证明你的 chocolatey 已经安装完毕，如果有误请检查环境变量\n  命令行中安装hugo：\n1  choco install hugo -confirm   安装hugo-extended（扩展版本）：\n1  choco install hugo-extended -confirm     检查hugo是否安装成功：命令行中敲入hugo version\n  2、初步建站实战（利用GithubPages进行部署）  在Github中建立一个仓库，仓库名为用户名.github.io   将仓库clone到本地一个你想存放网站文件的文件夹  1  git clone \u0026lt;YOUR-REPOSITORY_URL\u0026gt;    创建网站：在存放你博客的根目录 \u0026lt;YOUR-REPOSITORY_URL\u0026gt; 中敲入以下命令  1 2  //注意site后面是一个点，不能忽略啊，.代表当前目录 hugo new site .    添加主题（以我博客的主题Zzo为例子）：  1 2  git init git submodule add https://github.com/zzossig/hugo-theme-zzo.git themes/zzo    把 themes/zzo 下的 exampleSite文件夹的内容复制到你博客的根目录 在博客根目录中敲命令：（启动hugo服务器）  1  hugo server    点击这里查看测试（主题和示例网站中的markdown博客都正确显示了）  3、GithubPages服务 + 云托管 1 - 配置GithubPages服务进行个人博客的部署，使得所有人都可以访问你的博客站  在 config.toml 文件中设置 baseURL 为 Github Pages 服务的域名（用户名.github.io）  1 2 3 4 5  #config/config.toml baseURL = \u0026#34;https://blog.calvinhaynes.top/\u0026#34; #未设置阿里云托管之前应该是 \u0026#34;https://用户名.github.io\u0026#34; title = \u0026#34;Calvin Haynes\u0026#39;s Blog\u0026#34; theme = \u0026#34;zzo\u0026#34;    将更改过后的 github 仓库文件夹（就是你的博客根目录）推送到远端 在Github上设置GithubPages服务的一些参数  （Ps：有关 Custom domain 在以下的云托管中进行解释）\n2 - 云托管（阿里云） ​\t博主买了阿里云的学生机，一个1核2GB内存的轻量应用服务器，所以将博客站云托管在这个服务器上，以下就是基于阿里云的教程，其他服务器也都差不太多，可以自行google，有关阿里云服务器购买和初步配置自行到官网查看文档吧。\n 拥有一个阿里云服务器还不够，你需要购买注册一个你自己的专属域名。 拥有自己的专属域名之后，进入域名解析的工作台，就可以看见你的域名了   解析设置：（点击修改后各种参数的设置都有相关说明，其他问题也都可以在阿里云官网找到文档解释）   服务器绑定域名：   解析设置完后在你的博客根目录中的 static （静态文件存放的地方）中创建一个 CNMAE 文件（注意没有任何后缀）    CNAME 文件中写入你设置的域名，我的就是 blog.calvinhaynes.top ，写完记得更新github库（CNAME文件就是给你这个Github库绑定域名用的，CNAME的全名就是 Canonical Name，意思是别名）\n  最后更改 Github pages 配置中的 Custom domain 为你设置的新域名就好咯\n   现在就可以输入你设置的域名进行访问咯，阿里云服务器在中国，所以访问速度快的一批！！！（别忘了config.toml文件的baseURL参数设置）  2 - 主题参数设置和个性化 ​\t这部分主要是看主题作者写的详细文档进行自己的设计，在Hugo官网中找到的比较热门的主题的Github库中都有相关的文档，建议小伙伴们自行查看学习，每个主题都有不同之处，我使用的是Zzo主题，它的官方文档在这里\n​\t我的Github仓库在这里，欢迎 fork 和查看配置文件\n3 - 资源整理（一些有用的文档） Zzo主题官方文档\n阿里云云解析DNS文档\nhugo文章的front matter\n结语 这是一篇利用hugo框架搭建个人静态博客的基础教程，关于hugo的进阶使用建议大家查看官方文档，当然如果关于我的博客站利用hugo实现了一些有趣的操作我也会写相关的文章，欢迎大家再来阅读。\n感谢您看到最后，如果本文对您有所帮助的话，还希望给我一个一键三连（狗头保命），如果对于我和我的文章感兴趣的话，欢迎点一个关注，您会收到我回答和文章的更新通知，也欢迎加入我建立的技术交流群QQ：725133797 讨论交流。\n最后附上我的个人博客站：https://blog.calvinhaynes.top/，欢迎访问和交流\n","description":"利用Hugo静态博客框架创建个人博客站的教程","id":10,"section":"posts","tags":["Hugo","Github"],"title":"Hugo搭建个人博客教程（GithubPages + 阿里云）","uri":"https://blog.calvinhaynes.top/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8Bgithubpages-+-%E9%98%BF%E9%87%8C%E4%BA%91/"},{"content":"我是一个热爱IT技术和音乐的Dream Chaser，正在努力培养计算机的深度和广度认知，也会和各位分享我的Acoustic Music (๑❛ᴗ❛๑)，感谢各位的关注！！\n联系我的话，可以邮箱（chx1006488386@163.com）或者留言哦！！也欢迎大家加入我创建的技术交流群（QQ群号：725133797，下方企鹅图标点击可以直接跳转加群申请界面）\n 同时我在Bilibili上也上传了一些视频，欢迎大家前来观摩。\n  ","description":"博主的个人简介","id":11,"section":"","tags":null,"title":"关于博主","uri":"https://blog.calvinhaynes.top/about/"},{"content":"友情链接  小费同学\n一个不务正业的小弟～QAQ    ","description":"Calvin的友情链接","id":12,"section":"","tags":null,"title":"我的朋友们","uri":"https://blog.calvinhaynes.top/friends/"}]